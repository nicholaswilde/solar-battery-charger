{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Solar Battery Charger \u00b6 A solar battery charger to charge lithium ion (li-ion) 18650, 9V, and coin batteries and Ni-MH AA and AAA batteries. TL;DR \u00b6 Create secrets.h and update parameters in config.h . ( sudo apt install python3-serial screen brew install arduino-cli arduino-cli config init arduino-cli config add board_manager.additional_urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json arduino-cli core update-index arduino-cli core install esp32:esp32 arduino-cli lib install ThingSpeak \"Adafruit SH110X\" \"Adafruit INA260 Library\" Timezone ESP-Google-Sheet-Client arduino-cli compile -b esp32:esp32:featheresp32 . arduino-cli upload -b esp32:esp32:featheresp32 . -p /dev/ttyUSB0 . screen /dev/ttyUSB0 115200 ) Output \u00b6 Mode: recharge Mode: discharge Mode: recharge SSID: MySSID Connecting......... Connected! IP: 192 .168.1.77 Hostname: Feather Battery: Percentage: 90 % Voltage: 4 .04 V Current: 700 mA Power: 2 .6 W Channel: Number: 1642208 Status: success Sleep time: 15m Mode: discharge Battery: Percentage: 90 % Voltage: 4 .04 V Current: 700 mA Power: 2 .6 W License \u00b6 Apache 2.0 License Author \u00b6 This project was started in 2022 by Nicholas Wilde .","title":"Home"},{"location":"#solar-battery-charger","text":"A solar battery charger to charge lithium ion (li-ion) 18650, 9V, and coin batteries and Ni-MH AA and AAA batteries.","title":"Solar Battery Charger"},{"location":"#tldr","text":"Create secrets.h and update parameters in config.h . ( sudo apt install python3-serial screen brew install arduino-cli arduino-cli config init arduino-cli config add board_manager.additional_urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json arduino-cli core update-index arduino-cli core install esp32:esp32 arduino-cli lib install ThingSpeak \"Adafruit SH110X\" \"Adafruit INA260 Library\" Timezone ESP-Google-Sheet-Client arduino-cli compile -b esp32:esp32:featheresp32 . arduino-cli upload -b esp32:esp32:featheresp32 . -p /dev/ttyUSB0 . screen /dev/ttyUSB0 115200 )","title":"TL;DR"},{"location":"#output","text":"Mode: recharge Mode: discharge Mode: recharge SSID: MySSID Connecting......... Connected! IP: 192 .168.1.77 Hostname: Feather Battery: Percentage: 90 % Voltage: 4 .04 V Current: 700 mA Power: 2 .6 W Channel: Number: 1642208 Status: success Sleep time: 15m Mode: discharge Battery: Percentage: 90 % Voltage: 4 .04 V Current: 700 mA Power: 2 .6 W","title":"Output"},{"location":"#license","text":"Apache 2.0 License","title":"License"},{"location":"#author","text":"This project was started in 2022 by Nicholas Wilde .","title":"Author"},{"location":"about/","text":"About \u00b6 Objectives \u00b6 Recharge li-ion 18650, 9V, and coin batteries via a solar panel. Recharge Ni-MH AA and AAA batteries indirectly via a solar panel. Make the li-ion battery pack portable to easily recharge other devices. Receive notificatinos when the li-ion batteries are fully charged. Monitor the rate of charging via an online IOT service such as ThingSpeak or Adafruit IO . Learn about solar cells, panels, li-ion, and Ni-MH batteries . Visually monitor the battery voltage, current, and capacity during discharge. Turn on and off the Powerboost 1000 Basic using button A on the OLED. Display the current voltage, current, power, and percentage by pressing the A button on the OLED without uploading to an online service when the Feather is in a deep sleep. Background \u00b6 I recently replaced my solar landscape lights with hardwired ones and so I had a bunch of solar cells that I didn't know what to do with. I decided to salvage the solar cells to build myself a solar battery charger since I try to use as many rechargable batteries as possible as well as learn about solar panels and rechargable batteries. The problem with recharging Ni-MH batteries is that they're difficult to monitor and prevent overcharging. Therefore, I decided to create a lithium ion solar charger that then can be used to charge Ni-MH batteries via existing USB chargers. Concept \u00b6 The concept is to create a solar panel and circuit to charge 18650 li-ion batteries and then use the charged li-ion batteries to charge Ni-MH batteries via existing USB chargers. The li-ion batteries are to be disconnectable from the solar panel to make more portable to recharge other devices and batteries. Monitoring is handled by an Adafruit Feather HUZZAH32 (Feather) that has built in wifi support which makes it easy to monitor remotely as well as collect data. The board will monitor when the li-ion battery is charging and when charging is complete. It can also send notifications when the charge is complete via ThingSpeak and IFTTT. Current Limitations \u00b6 The Feather is using some power during the charging of the li-ion batteries. The Feather turns off during high current discharge. See issue #39 . I have had issues with two bq24074 chargers where it would suddenly stop charting the batteries. The voltage reading of the LIPO pin would oscillate between 0 and 3V. I suspect the IC was damaged due to a too high of voltage being output by the panel. This still needs to be verified.","title":"About"},{"location":"about/#about","text":"","title":"About"},{"location":"about/#objectives","text":"Recharge li-ion 18650, 9V, and coin batteries via a solar panel. Recharge Ni-MH AA and AAA batteries indirectly via a solar panel. Make the li-ion battery pack portable to easily recharge other devices. Receive notificatinos when the li-ion batteries are fully charged. Monitor the rate of charging via an online IOT service such as ThingSpeak or Adafruit IO . Learn about solar cells, panels, li-ion, and Ni-MH batteries . Visually monitor the battery voltage, current, and capacity during discharge. Turn on and off the Powerboost 1000 Basic using button A on the OLED. Display the current voltage, current, power, and percentage by pressing the A button on the OLED without uploading to an online service when the Feather is in a deep sleep.","title":"Objectives"},{"location":"about/#background","text":"I recently replaced my solar landscape lights with hardwired ones and so I had a bunch of solar cells that I didn't know what to do with. I decided to salvage the solar cells to build myself a solar battery charger since I try to use as many rechargable batteries as possible as well as learn about solar panels and rechargable batteries. The problem with recharging Ni-MH batteries is that they're difficult to monitor and prevent overcharging. Therefore, I decided to create a lithium ion solar charger that then can be used to charge Ni-MH batteries via existing USB chargers.","title":"Background"},{"location":"about/#concept","text":"The concept is to create a solar panel and circuit to charge 18650 li-ion batteries and then use the charged li-ion batteries to charge Ni-MH batteries via existing USB chargers. The li-ion batteries are to be disconnectable from the solar panel to make more portable to recharge other devices and batteries. Monitoring is handled by an Adafruit Feather HUZZAH32 (Feather) that has built in wifi support which makes it easy to monitor remotely as well as collect data. The board will monitor when the li-ion battery is charging and when charging is complete. It can also send notifications when the charge is complete via ThingSpeak and IFTTT.","title":"Concept"},{"location":"about/#current-limitations","text":"The Feather is using some power during the charging of the li-ion batteries. The Feather turns off during high current discharge. See issue #39 . I have had issues with two bq24074 chargers where it would suddenly stop charting the batteries. The voltage reading of the LIPO pin would oscillate between 0 and 3V. I suspect the IC was damaged due to a too high of voltage being output by the panel. This still needs to be verified.","title":"Current Limitations"},{"location":"calibration/","text":"Calibration \u00b6 Instead of using a linear fit to calculate the battery percentage, the sketch uses the coulomb counting method by using the collection time interval and current passing to the battery. Exponential Trendline \u00b6 The sketch uses an exponetial trendline for a voltage versus percentage to calculate the battyer percentage. The formula for the exponential trendline is as follows: \\[ B{\\rm e}^{Ax} \\] The coefficients of the trendline can be found from the equation of the exponential trendline on the chart. In this instance, the following coefficients are found: \\[ y=6.86\\mathrm{E}{-07}{\\rm e}^{3.48\\mathrm{E}{-03}x} \\] \\[ B=0.000000686 \\] \\[ A=0.00348 \\] These coefficients can then be entered into the config.h file as EXP_A and EXP_B . Note The coefficients supplied with the sketch were found using two 3000 mAh batteries. The maximum and minimum voltages can be found by from this data as well and transcribed to the config.h file in the VOLTAGE_MAX and VOLTAGE_MIN parameters. Google Sheet \u00b6 The scatter plot is created by performing the following steps: Collect data from when the batteries are fully depleted to fully charged. This can be done either using a solar panel or wall wart. Create a column that calculates the time in duration between readings in hours. Create a column that multiplies the current by the time duration to get the number of coulombs collected in that time interval. Create another column that sums the amount of coulombs collected up to that period in time. Create another column that calculates the percentage by dividing the previous column with the maximum number of coulombs collected. Create a scatter plot that with the voltage on the X-Axis and percentage on the Y-Axis. Add an exponential trendline with the equation in in the legend. Transcribe the coefficients of the trendline to the config.h file in the EXP_A and EXP_B parameters. Note The data collection needs to start when the battery is fully depleted (cut off by the BMS) in order to accurately calibrate the system. Template \u00b6 WIP ( #57 ) Current Limitations \u00b6 The Google Sheet assumes that the current over the collection period is constant. Integration of the current versus time would be a better estimation of the amount of energy collected. The collection at the end of the charge can be a bit erratic and group around the same same voltage. This was clipped in my original data. The coefficients can only be found by the equation on the scatter plot chart. Have not figured out a way to calculate the coefficients in a Sheet cell ( #58 ). References \u00b6 https://github.com/rlogiacco/BatterySense#remaining-capacity-approximation https://batteryuniversity.com/article/bu-903-how-to-measure-state-of-charge","title":"Calibration"},{"location":"calibration/#calibration","text":"Instead of using a linear fit to calculate the battery percentage, the sketch uses the coulomb counting method by using the collection time interval and current passing to the battery.","title":"Calibration"},{"location":"calibration/#exponential-trendline","text":"The sketch uses an exponetial trendline for a voltage versus percentage to calculate the battyer percentage. The formula for the exponential trendline is as follows: \\[ B{\\rm e}^{Ax} \\] The coefficients of the trendline can be found from the equation of the exponential trendline on the chart. In this instance, the following coefficients are found: \\[ y=6.86\\mathrm{E}{-07}{\\rm e}^{3.48\\mathrm{E}{-03}x} \\] \\[ B=0.000000686 \\] \\[ A=0.00348 \\] These coefficients can then be entered into the config.h file as EXP_A and EXP_B . Note The coefficients supplied with the sketch were found using two 3000 mAh batteries. The maximum and minimum voltages can be found by from this data as well and transcribed to the config.h file in the VOLTAGE_MAX and VOLTAGE_MIN parameters.","title":"Exponential Trendline"},{"location":"calibration/#google-sheet","text":"The scatter plot is created by performing the following steps: Collect data from when the batteries are fully depleted to fully charged. This can be done either using a solar panel or wall wart. Create a column that calculates the time in duration between readings in hours. Create a column that multiplies the current by the time duration to get the number of coulombs collected in that time interval. Create another column that sums the amount of coulombs collected up to that period in time. Create another column that calculates the percentage by dividing the previous column with the maximum number of coulombs collected. Create a scatter plot that with the voltage on the X-Axis and percentage on the Y-Axis. Add an exponential trendline with the equation in in the legend. Transcribe the coefficients of the trendline to the config.h file in the EXP_A and EXP_B parameters. Note The data collection needs to start when the battery is fully depleted (cut off by the BMS) in order to accurately calibrate the system.","title":"Google Sheet"},{"location":"calibration/#template","text":"WIP ( #57 )","title":"Template"},{"location":"calibration/#current-limitations","text":"The Google Sheet assumes that the current over the collection period is constant. Integration of the current versus time would be a better estimation of the amount of energy collected. The collection at the end of the charge can be a bit erratic and group around the same same voltage. This was clipped in my original data. The coefficients can only be found by the equation on the scatter plot chart. Have not figured out a way to calculate the coefficients in a Sheet cell ( #58 ).","title":"Current Limitations"},{"location":"calibration/#references","text":"https://github.com/rlogiacco/BatterySense#remaining-capacity-approximation https://batteryuniversity.com/article/bu-903-how-to-measure-state-of-charge","title":"References"},{"location":"configuration/","text":"Configuration \u00b6 Because I work mainly out of a Chromebook and Rasperry Pis, this project is using the arduino-cli command line utility with Linux rather than the Arduino IDE . Initialize the config arduino-cli config init Add the ESP32 package library arduino-cli config add board_manager.additional_urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json Check that the update addition was successful. cat ~/.arduino15/arduino-cli.yaml Note This is assuming that arduino-cli was installed in the home directory ( ~/.arduino15 ) ~/.arduino15/arduino-cli.yaml board_manager : additional_urls : - https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json ... Update the core index arduino-cli core update-index Install the ESP32 core arduino-cli core install esp32:esp32 Search for the featheresp32 board arduino-cli board search featheresp32 Typical Output Board Name FQBN Platform ID Adafruit ESP32 Feather esp32:esp32:featheresp32 esp32:esp32 Take note of the output under FQBN because that is what will need to be passed as the board ( -b ) parameter with the arduino-cli command. In this example, the board to be used will be esp32:esp32:featheresp32 .A Install the required libraries arduino-cli lib install ThingSpeak \"Adafruit SH110X\" \"Adafruit INA260 Library\" Timezone ESP-Google-Sheet-Client Tested Library Versions Name Version Adafruit_SH110X 2 .1.6A Adafruit_INA260_Library 1 .5.0 ESP-Google-Sheet-Client 1 .0.0 ThingSpeak 2 .0.1 Timezone 1 .2.4 Create a channel on ThingSpeak and take note of the Channel ID , channel Write API Key , and User API Key . Create secret.h and update variables in config.h . Compile arduino-cli compile -b esp32:esp32:featheresp32 . Note The dot at the end of the command tells arduino-cli to use the sketch in the current directory. The name of the sketch may also be used. Typical Output WARNING: library Timezone claims to run on avr architecture ( s ) and may be incompatible with your current board which runs on esp32 architecture ( s ) . Sketch uses 742601 bytes ( 56 % ) of program storage space. Maximum is 1310720 bytes. Global variables use 40648 bytes ( 12 % ) of dynamic memory, leaving 287032 bytes for local variables. Maximum is 327680 bytes. Be sure to compile your code before uploading it if changes have been made to the sketch! Upload the sketch to the Feather arduino-cli upload -p /dev/ttyUSB0 -b esp32:esp32:featheresp32 . Typical Output esptool.py v3.1 Serial port /dev/ttyUSB0 Connecting.... Chip is ESP32-D0WD-V3 ( revision 3 ) Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None Crystal is 40MHz MAC: 7c:87:ce:f0:88:0c Uploading stub... Running stub... Stub running... Changing baud rate to 921600 Changed. Configuring flash size... Flash will be erased from 0x0000e000 to 0x0000ffff... Flash will be erased from 0x00001000 to 0x00005fff... Flash will be erased from 0x00010000 to 0x000c6fff... Flash will be erased from 0x00008000 to 0x00008fff... Compressed 8192 bytes to 47 ... Wrote 8192 bytes ( 47 compressed ) at 0x0000e000 in 0 .1 seconds ( effective 635 .7 kbit/s ) ... Hash of data verified. Compressed 17104 bytes to 11804 ... Wrote 17104 bytes ( 11804 compressed ) at 0x00001000 in 0 .4 seconds ( effective 313 .6 kbit/s ) ... Hash of data verified. Compressed 748480 bytes to 477080 ... Wrote 748480 bytes ( 477080 compressed ) at 0x00010000 in 8 .3 seconds ( effective 722 .5 kbit/s ) ... Hash of data verified. Compressed 3072 bytes to 128 ... Wrote 3072 bytes ( 128 compressed ) at 0x00008000 in 0 .1 seconds ( effective 439 .5 kbit/s ) ... Hash of data verified. Leaving... Hard resetting via RTS pin... Monitor serial connection using GNU Screen screen /dev/ttyUSB0 115200 Note Make sure the baud rate matches the BAUDE_RATE in the config.h! The recharge mode is the default mode during boot. The A button on the OLED may be held down during boot to choose the discharge mode which will keep the OLED on and display the battery measurements. Mode: recharge Mode: discharge Mode: recharge SSID: MySSID Connecting......... Connected! IP: 192 .168.1.77 Hostname: Feather Battery: Percentage: 90 % Voltage: 4 .04 V Current: 700 mA Power: 2 .6 W Channel: Number: 1642208 Status: success Sleep time: 15m Mode: discharge Battery: Percentage: 90 % Voltage: 4 .04 V Current: 700 mA Power: 2 .6 W Kill the monitoring screen by pressing Ctrl + a k y Secrets \u00b6 secrets.h is a file used to store secrets such as API tokens and wifi credentials that aren't updated in GitHub. The file is ignored in .gitignore . secrets.h #define SECRET_SSID \"MySSID\" // replace MySSID with your WiFi network name #define SECRET_PASS \"MyPassword\" // replace MyPassword with your WiFi password #define SECRET_CH_ID 0000000 // replace 0000000 with your channel number #define SECRET_WRITE_APIKEY \"XYZ\" // replace XYZ with your channel write API Key #define SECRET_HOSTNAME \"Feather\" #define SECRET_USER_APIKEY \"ABC\" // replace ABC with ThingSpeak User API Key #define PROJECT_ID \"esp-signer-xxxxxx\" // taken from \"project_id\" key in the Google Cloud Platform JSON file. #define CLIENT_EMAIL \"esp-signer-sa@esp-signer-xxxxxx.iam.gserviceaccount.com\" // taken from \"client_email\" key in the Google Cloud Platform JSON file. #define SPREADSHEET_ID \"ABCDEFG\" // Google Sheet ID. #define PRIVATE_KEY \"-----BEGIN PRIVATE KEY-----\\nxxxxxxxxxxxxx\\n-----END PRIVATE KEY-----\\n\" // taken from \"private_key\" key in the Google Cloud Platform JSON file. Secrets can be used in sketches #include \"secrets.h\" The nomenclature used in this project is different than what arduino-cli specifies ( arduino_secrets.h ) because this project does not use an Arduino. secrets task \u00b6 Task may also be used to generate secrets.h . task secrets SSID = MySSID PASS = MyPassword CH_ID = 0000000 WRITE_APIKEY = XYZ USER_APIKEY = ABC \\ PROJECT_ID = esp-signer-xxxxxx \\ CLIENT_EMAIL = \"esp-signer-sa@esp-signer-xxxxxx.iam.gserviceaccount.com\" \\ SPREADSHEET_ID = \"ABCDEFG\" \\ PRIVATE_KEY = \"-----BEGIN PRIVATE KEY-----\\nxxxxxxxxxxxxx\\n-----END PRIVATE KEY-----\\n\" Overwrite Sketch Header \u00b6 Instead of using the secrets.h file, the include may be commented out at the top of the sketch and the variable values may be manually written in the header of solar-battery-charger.ino Warning This method is not recommended if the sketch is going to be uploaded to a repository! Clear Channel \u00b6 The channel may be cleared if the created_at date of the last data point is older than the current date. The dates take into account the current timezone which may be set with timeZone . To turn on the clear channel option, set doClear to true . Metadata \u00b6 Instead of specifying -b and -p for every command, a sketch.json may be stored in the sketch directory that sets the defaults for that sketch. The sketch.json file may be generated by using the arduino-cli board attach command. arduino-cli board attach -b esp32:esp32:featheresp32 . arduino-cli board attach -p /dev/ttyUSB0 . Attaching the board didn't work for me because arduino-cli didn't recognize the Feather attached to my port for some reason and so I had to manually add the port. Note The port needs to start with the protocol, e.g. serial:// . The documentation doesn't show what a typical sketch.json looks like so here is one: sketch.json { \"cpu\" : { \"fqbn\" : \"es32:esp32:featheresp32\" , \"port\" : \"serial:///dev/ttyUSB0\" } } ThingSpeak \u00b6 The results are exported to a ThingSpeak public channel which can be seen here . The channel Write API Key ( SECRET_WRITE_APIKEY ) can be found in the API Keys tab on the channel page. The Channel ID ( SECRET_CH_ID ) can be found on at the top of the channel page. Fields \u00b6 On the Channel Settings tab of the channel, create 3 fields for the battery percentage, level, and voltage. Visualizations & Widgets \u00b6 Add whichever visualizations and widgets you'd like. Notification from IFTTT \u00b6 Notifications from IFTTT can be setup by connecting ThingSpeak to IFTTT. See these instructions . Google Sheets \u00b6 The sketch can also upload data to a Google Sheet using the ESP-Google-Sheet-Client library. Checkout the documentation for how to setup the library. Create a new sheet. Share the sheet with the client email from the Google Cloud Platform json file. Fill out the header of the sheet. Get the spreadsheet ID from the URL in between the /d/ and /edit#gid=0 https://docs.google.com/spreadsheets/d/<SPREADSHEET_ID>/edit#gid=0 Fill out the variables in the secrets.h file. Set doSheets in the config.h file to true to enable the uploading of values to Sheets. Note If the Google Sheet is created in a normal Google account, you'll need to share the Sheet with the email address specified in CLIENT_EMAIL in order to write to it using the Google Cloud Platform. Battery Percentage \u00b6 See the calibration page on how to calibrate the system. Task \u00b6 go-task may be used to automate some of the commands. Update the parameters in task.env . Note Variables are duplicated both in task.env and sketch.json because I couldn't get go-task to not have errors when trying to parse sketch.json when it didn't exist. Bootstrap the entire environment (not including the installation of arduino-cli) task bootstrap Warning This will overwrite your entire arduino-cli config file! Compile, upload, and monitor the sketch. task compile-upload Get a list of all of the commands. task","title":"Configuration"},{"location":"configuration/#configuration","text":"Because I work mainly out of a Chromebook and Rasperry Pis, this project is using the arduino-cli command line utility with Linux rather than the Arduino IDE . Initialize the config arduino-cli config init Add the ESP32 package library arduino-cli config add board_manager.additional_urls https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json Check that the update addition was successful. cat ~/.arduino15/arduino-cli.yaml Note This is assuming that arduino-cli was installed in the home directory ( ~/.arduino15 ) ~/.arduino15/arduino-cli.yaml board_manager : additional_urls : - https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json ... Update the core index arduino-cli core update-index Install the ESP32 core arduino-cli core install esp32:esp32 Search for the featheresp32 board arduino-cli board search featheresp32 Typical Output Board Name FQBN Platform ID Adafruit ESP32 Feather esp32:esp32:featheresp32 esp32:esp32 Take note of the output under FQBN because that is what will need to be passed as the board ( -b ) parameter with the arduino-cli command. In this example, the board to be used will be esp32:esp32:featheresp32 .A Install the required libraries arduino-cli lib install ThingSpeak \"Adafruit SH110X\" \"Adafruit INA260 Library\" Timezone ESP-Google-Sheet-Client Tested Library Versions Name Version Adafruit_SH110X 2 .1.6A Adafruit_INA260_Library 1 .5.0 ESP-Google-Sheet-Client 1 .0.0 ThingSpeak 2 .0.1 Timezone 1 .2.4 Create a channel on ThingSpeak and take note of the Channel ID , channel Write API Key , and User API Key . Create secret.h and update variables in config.h . Compile arduino-cli compile -b esp32:esp32:featheresp32 . Note The dot at the end of the command tells arduino-cli to use the sketch in the current directory. The name of the sketch may also be used. Typical Output WARNING: library Timezone claims to run on avr architecture ( s ) and may be incompatible with your current board which runs on esp32 architecture ( s ) . Sketch uses 742601 bytes ( 56 % ) of program storage space. Maximum is 1310720 bytes. Global variables use 40648 bytes ( 12 % ) of dynamic memory, leaving 287032 bytes for local variables. Maximum is 327680 bytes. Be sure to compile your code before uploading it if changes have been made to the sketch! Upload the sketch to the Feather arduino-cli upload -p /dev/ttyUSB0 -b esp32:esp32:featheresp32 . Typical Output esptool.py v3.1 Serial port /dev/ttyUSB0 Connecting.... Chip is ESP32-D0WD-V3 ( revision 3 ) Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None Crystal is 40MHz MAC: 7c:87:ce:f0:88:0c Uploading stub... Running stub... Stub running... Changing baud rate to 921600 Changed. Configuring flash size... Flash will be erased from 0x0000e000 to 0x0000ffff... Flash will be erased from 0x00001000 to 0x00005fff... Flash will be erased from 0x00010000 to 0x000c6fff... Flash will be erased from 0x00008000 to 0x00008fff... Compressed 8192 bytes to 47 ... Wrote 8192 bytes ( 47 compressed ) at 0x0000e000 in 0 .1 seconds ( effective 635 .7 kbit/s ) ... Hash of data verified. Compressed 17104 bytes to 11804 ... Wrote 17104 bytes ( 11804 compressed ) at 0x00001000 in 0 .4 seconds ( effective 313 .6 kbit/s ) ... Hash of data verified. Compressed 748480 bytes to 477080 ... Wrote 748480 bytes ( 477080 compressed ) at 0x00010000 in 8 .3 seconds ( effective 722 .5 kbit/s ) ... Hash of data verified. Compressed 3072 bytes to 128 ... Wrote 3072 bytes ( 128 compressed ) at 0x00008000 in 0 .1 seconds ( effective 439 .5 kbit/s ) ... Hash of data verified. Leaving... Hard resetting via RTS pin... Monitor serial connection using GNU Screen screen /dev/ttyUSB0 115200 Note Make sure the baud rate matches the BAUDE_RATE in the config.h! The recharge mode is the default mode during boot. The A button on the OLED may be held down during boot to choose the discharge mode which will keep the OLED on and display the battery measurements. Mode: recharge Mode: discharge Mode: recharge SSID: MySSID Connecting......... Connected! IP: 192 .168.1.77 Hostname: Feather Battery: Percentage: 90 % Voltage: 4 .04 V Current: 700 mA Power: 2 .6 W Channel: Number: 1642208 Status: success Sleep time: 15m Mode: discharge Battery: Percentage: 90 % Voltage: 4 .04 V Current: 700 mA Power: 2 .6 W Kill the monitoring screen by pressing Ctrl + a k y","title":"Configuration"},{"location":"configuration/#secrets","text":"secrets.h is a file used to store secrets such as API tokens and wifi credentials that aren't updated in GitHub. The file is ignored in .gitignore . secrets.h #define SECRET_SSID \"MySSID\" // replace MySSID with your WiFi network name #define SECRET_PASS \"MyPassword\" // replace MyPassword with your WiFi password #define SECRET_CH_ID 0000000 // replace 0000000 with your channel number #define SECRET_WRITE_APIKEY \"XYZ\" // replace XYZ with your channel write API Key #define SECRET_HOSTNAME \"Feather\" #define SECRET_USER_APIKEY \"ABC\" // replace ABC with ThingSpeak User API Key #define PROJECT_ID \"esp-signer-xxxxxx\" // taken from \"project_id\" key in the Google Cloud Platform JSON file. #define CLIENT_EMAIL \"esp-signer-sa@esp-signer-xxxxxx.iam.gserviceaccount.com\" // taken from \"client_email\" key in the Google Cloud Platform JSON file. #define SPREADSHEET_ID \"ABCDEFG\" // Google Sheet ID. #define PRIVATE_KEY \"-----BEGIN PRIVATE KEY-----\\nxxxxxxxxxxxxx\\n-----END PRIVATE KEY-----\\n\" // taken from \"private_key\" key in the Google Cloud Platform JSON file. Secrets can be used in sketches #include \"secrets.h\" The nomenclature used in this project is different than what arduino-cli specifies ( arduino_secrets.h ) because this project does not use an Arduino.","title":"Secrets"},{"location":"configuration/#secrets-task","text":"Task may also be used to generate secrets.h . task secrets SSID = MySSID PASS = MyPassword CH_ID = 0000000 WRITE_APIKEY = XYZ USER_APIKEY = ABC \\ PROJECT_ID = esp-signer-xxxxxx \\ CLIENT_EMAIL = \"esp-signer-sa@esp-signer-xxxxxx.iam.gserviceaccount.com\" \\ SPREADSHEET_ID = \"ABCDEFG\" \\ PRIVATE_KEY = \"-----BEGIN PRIVATE KEY-----\\nxxxxxxxxxxxxx\\n-----END PRIVATE KEY-----\\n\"","title":"secrets task"},{"location":"configuration/#overwrite-sketch-header","text":"Instead of using the secrets.h file, the include may be commented out at the top of the sketch and the variable values may be manually written in the header of solar-battery-charger.ino Warning This method is not recommended if the sketch is going to be uploaded to a repository!","title":"Overwrite Sketch Header"},{"location":"configuration/#clear-channel","text":"The channel may be cleared if the created_at date of the last data point is older than the current date. The dates take into account the current timezone which may be set with timeZone . To turn on the clear channel option, set doClear to true .","title":"Clear Channel"},{"location":"configuration/#metadata","text":"Instead of specifying -b and -p for every command, a sketch.json may be stored in the sketch directory that sets the defaults for that sketch. The sketch.json file may be generated by using the arduino-cli board attach command. arduino-cli board attach -b esp32:esp32:featheresp32 . arduino-cli board attach -p /dev/ttyUSB0 . Attaching the board didn't work for me because arduino-cli didn't recognize the Feather attached to my port for some reason and so I had to manually add the port. Note The port needs to start with the protocol, e.g. serial:// . The documentation doesn't show what a typical sketch.json looks like so here is one: sketch.json { \"cpu\" : { \"fqbn\" : \"es32:esp32:featheresp32\" , \"port\" : \"serial:///dev/ttyUSB0\" } }","title":"Metadata"},{"location":"configuration/#thingspeak","text":"The results are exported to a ThingSpeak public channel which can be seen here . The channel Write API Key ( SECRET_WRITE_APIKEY ) can be found in the API Keys tab on the channel page. The Channel ID ( SECRET_CH_ID ) can be found on at the top of the channel page.","title":"ThingSpeak"},{"location":"configuration/#fields","text":"On the Channel Settings tab of the channel, create 3 fields for the battery percentage, level, and voltage.","title":"Fields"},{"location":"configuration/#visualizations-widgets","text":"Add whichever visualizations and widgets you'd like.","title":"Visualizations &amp; Widgets"},{"location":"configuration/#notification-from-ifttt","text":"Notifications from IFTTT can be setup by connecting ThingSpeak to IFTTT. See these instructions .","title":"Notification from IFTTT"},{"location":"configuration/#google-sheets","text":"The sketch can also upload data to a Google Sheet using the ESP-Google-Sheet-Client library. Checkout the documentation for how to setup the library. Create a new sheet. Share the sheet with the client email from the Google Cloud Platform json file. Fill out the header of the sheet. Get the spreadsheet ID from the URL in between the /d/ and /edit#gid=0 https://docs.google.com/spreadsheets/d/<SPREADSHEET_ID>/edit#gid=0 Fill out the variables in the secrets.h file. Set doSheets in the config.h file to true to enable the uploading of values to Sheets. Note If the Google Sheet is created in a normal Google account, you'll need to share the Sheet with the email address specified in CLIENT_EMAIL in order to write to it using the Google Cloud Platform.","title":"Google Sheets"},{"location":"configuration/#battery-percentage","text":"See the calibration page on how to calibrate the system.","title":"Battery Percentage"},{"location":"configuration/#task","text":"go-task may be used to automate some of the commands. Update the parameters in task.env . Note Variables are duplicated both in task.env and sketch.json because I couldn't get go-task to not have errors when trying to parse sketch.json when it didn't exist. Bootstrap the entire environment (not including the installation of arduino-cli) task bootstrap Warning This will overwrite your entire arduino-cli config file! Compile, upload, and monitor the sketch. task compile-upload Get a list of all of the commands. task","title":"Task"},{"location":"design/","text":"Design \u00b6 Hardware \u00b6 15X Energizer LED Solar pathway Lights 1X Adafruit Feather HUZZAH32 ESP32 1X Adafruit 128x64 OLED FeatherWing 1X Adafruit INA260 Current + Voltage + Power Sensor Breakout 1X Adafruit Universal USB / DC / Solar Lithium Ion/Polymer charger - bq24074 1X Adafruit PowerBoost 1000 Basic - 5V USB Boost 2X IMREN 3.7v 18650 Rechargeable Battery 3000mAh 1X NITECORE UMS2 Charger 1X 18650 2 Battery Holder 7.4V 1X EBL 9V Li-ion Battery Charger 1X CT-Energy Lithium Coin Button Batteries Charger 1X 10k\u03a9 Resistor 1X Adafruit Feather Stacking Headers - 12-pin and 16-pin female headers 2X Cylewet 5mm High Knob Vertical Slide Switch 3 Pin 2 Position 1P2T SPDT Panel 1X ELEGOO 3pcs Breadboard 830 Point Solderless Prototype PCB Board Kit 1X Anmbest 5PCS 1S 3.7V 4A 18650 Charger PCB BMS Protection Board Note If the output from the battery turns off, it may be because the BMS needs to be reset. This may be done by shorting the P- and B- on the BMS. I opted to drop support for the ESP8266 for a few reasons: The need to short pin 16 in order to wake the Feather from deeps sleep removes the ability to use button B on the OLED screen. Button A on the OLED screen was tied to the Feather LED. There is no way to determine the method that was uesd to wake the Feather. Electronics \u00b6 On the bq24074, carefully cut the 1.0A jumper and solder the 1.5A to increase the current limit. This needs to be verified that the panel is actually outputting more than 1A. Panel \u00b6 BMS \u00b6 The BMS is really small and can be difficult to mount and use. I thought about hot gluing it to the battery holder and then soldering the wires to it directly. However, I opted against it because I was too afraid that the wires soldered to the P+ and P- and going to the rest of the breadboard would break off easily. Therefore, I soldered pins to the BMS pads and connected it to the system via the breadboard. I used the standard header pins that come with a lot of the Arduino type boards and just removed the plastic spacer. I then added pre-tinned the pins as well as the BMS pads. I then inserted the pins into the breadboard at the correct locations then clamped the outer pins to the BMS using a set of helping hands. Then soldered the pins to the pads. Battery Holder \u00b6 The battery holder comes wired in series but this design requires that the batteries be wired in parallel. Connect the positive terminals of both batteries together and add a negative lead wire from the end of the holder that connects the two batteries. Insert one of the batteries in reverse where the spring is touching the positive end of the battery. Warning Inserting the batteries incorrectly will cause them to short! Services \u00b6 IFTTT ThingSpeak Software \u00b6 arduino-cli ubuntu server go-task GNU Screen jq (for go-task) pre-commit arduino-lint yamllint Circuit \u00b6 Connect the output of the battery to the Vin+ of the INA260. Connect the Vin- of the INA260 to the LIPO pin of the bq24074. Connect the BAT pin of the Feather to the OUT pin of the bq24074. Connect a 1P2T switch to the EN pin of the Feather to ground. Connect a 1P2T switch to the EN pin of the Powerboost and a 10k\u03a9 resistor. Connect pin 33 of the Feather to a node between the Powerboost switch and the 10k\u03a9 resistor. Connect all GND pins together. Connect the SCL and SCA pins of the Feather to the SCL and SCA pins of the INA260. Connect the 3V pin of the Feather to the VCC pin of the INA260. Connect the BMS in between the battery, ground, and V+ of the INA260. Circuits made with Circuit Diagram Warning The li-ion batteries are wired in parallel even though the 2 battery holder come wired in series. Warning The JST pins, depending on where they are purchased, may be backwards in terms of the wiring. See this link to determine the correct wiring according to IoT convention. IoT devices must use batteries wired like this: With the key facing down and the wires toward you, the red is on the right.","title":"Design"},{"location":"design/#design","text":"","title":"Design"},{"location":"design/#hardware","text":"15X Energizer LED Solar pathway Lights 1X Adafruit Feather HUZZAH32 ESP32 1X Adafruit 128x64 OLED FeatherWing 1X Adafruit INA260 Current + Voltage + Power Sensor Breakout 1X Adafruit Universal USB / DC / Solar Lithium Ion/Polymer charger - bq24074 1X Adafruit PowerBoost 1000 Basic - 5V USB Boost 2X IMREN 3.7v 18650 Rechargeable Battery 3000mAh 1X NITECORE UMS2 Charger 1X 18650 2 Battery Holder 7.4V 1X EBL 9V Li-ion Battery Charger 1X CT-Energy Lithium Coin Button Batteries Charger 1X 10k\u03a9 Resistor 1X Adafruit Feather Stacking Headers - 12-pin and 16-pin female headers 2X Cylewet 5mm High Knob Vertical Slide Switch 3 Pin 2 Position 1P2T SPDT Panel 1X ELEGOO 3pcs Breadboard 830 Point Solderless Prototype PCB Board Kit 1X Anmbest 5PCS 1S 3.7V 4A 18650 Charger PCB BMS Protection Board Note If the output from the battery turns off, it may be because the BMS needs to be reset. This may be done by shorting the P- and B- on the BMS. I opted to drop support for the ESP8266 for a few reasons: The need to short pin 16 in order to wake the Feather from deeps sleep removes the ability to use button B on the OLED screen. Button A on the OLED screen was tied to the Feather LED. There is no way to determine the method that was uesd to wake the Feather.","title":"Hardware"},{"location":"design/#electronics","text":"On the bq24074, carefully cut the 1.0A jumper and solder the 1.5A to increase the current limit. This needs to be verified that the panel is actually outputting more than 1A.","title":"Electronics"},{"location":"design/#panel","text":"","title":"Panel"},{"location":"design/#bms","text":"The BMS is really small and can be difficult to mount and use. I thought about hot gluing it to the battery holder and then soldering the wires to it directly. However, I opted against it because I was too afraid that the wires soldered to the P+ and P- and going to the rest of the breadboard would break off easily. Therefore, I soldered pins to the BMS pads and connected it to the system via the breadboard. I used the standard header pins that come with a lot of the Arduino type boards and just removed the plastic spacer. I then added pre-tinned the pins as well as the BMS pads. I then inserted the pins into the breadboard at the correct locations then clamped the outer pins to the BMS using a set of helping hands. Then soldered the pins to the pads.","title":"BMS"},{"location":"design/#battery-holder","text":"The battery holder comes wired in series but this design requires that the batteries be wired in parallel. Connect the positive terminals of both batteries together and add a negative lead wire from the end of the holder that connects the two batteries. Insert one of the batteries in reverse where the spring is touching the positive end of the battery. Warning Inserting the batteries incorrectly will cause them to short!","title":"Battery Holder"},{"location":"design/#services","text":"IFTTT ThingSpeak","title":"Services"},{"location":"design/#software","text":"arduino-cli ubuntu server go-task GNU Screen jq (for go-task) pre-commit arduino-lint yamllint","title":"Software"},{"location":"design/#circuit","text":"Connect the output of the battery to the Vin+ of the INA260. Connect the Vin- of the INA260 to the LIPO pin of the bq24074. Connect the BAT pin of the Feather to the OUT pin of the bq24074. Connect a 1P2T switch to the EN pin of the Feather to ground. Connect a 1P2T switch to the EN pin of the Powerboost and a 10k\u03a9 resistor. Connect pin 33 of the Feather to a node between the Powerboost switch and the 10k\u03a9 resistor. Connect all GND pins together. Connect the SCL and SCA pins of the Feather to the SCL and SCA pins of the INA260. Connect the 3V pin of the Feather to the VCC pin of the INA260. Connect the BMS in between the battery, ground, and V+ of the INA260. Circuits made with Circuit Diagram Warning The li-ion batteries are wired in parallel even though the 2 battery holder come wired in series. Warning The JST pins, depending on where they are purchased, may be backwards in terms of the wiring. See this link to determine the correct wiring according to IoT convention. IoT devices must use batteries wired like this: With the key facing down and the wires toward you, the red is on the right.","title":"Circuit"},{"location":"references/","text":"References \u00b6 https://www.seeedstudio.com/blog/2019/10/09/voltage-dividers-everything-you-need-to-know/ https://cdn-learn.adafruit.com/downloads/pdf/adafruit-feather-huzzah-esp8266.pdf http://web.mit.edu/evt/summary_battery_specifications.pdf https://dronebotworkshop.com/dc-volt-current/#Voltage_References https://learn.adafruit.com/using-ifttt-with-adafruit-io/arduino-code-2 https://learn.adafruit.com/using-ifttt-with-adafruit-io/wiring#battery-tracking https://siytek.com/arduino-cli-raspberry-pi/ https://www.best-microcontroller-projects.com/tp4056-page2.html https://en.wikipedia.org/wiki/Nickel%E2%80%93metal_hydride_battery https://arduino.github.io/arduino-cli/ https://www.electronicshub.org/solar-battery-charger-for-18650/ https://create.arduino.cc/projecthub/B45i/getting-started-with-arduino-cli-7652a5 https://github.com/webdevops/go-replace https://arduino-esp8266.readthedocs.io/en/latest/index.html https://roboticsbackend.com/arduino-store-array-into-eeprom/ https://www.arduino.cc/en/Tutorial/BuiltInExamples/Debounce https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection https://github.com/esp8266/Arduino/tree/master/libraries/EEPROM https://support.microsoft.com/en-us/office/slope-function-11fb8f97-3117-4813-98aa-61d7e01276b9 https://github.com/arduino-libraries/NTPClient/blob/master/examples/Basic/Basic.ino https://www.mathworks.com/help/thingspeak/use-ifttt-to-send-text-message-notification.html?searchHighlight=ifttt&s_tid=srchtitle_ifttt_1 https://www.mathworks.com/help/thingspeak/read-data-for-regression-analysis.html https://electronics.stackexchange.com/questions/307586/need-help-calibrating-adc-input-using-a-voltage-divider https://learn.adafruit.com/adafruit-bq24074-universal-usb-dc-solar-charger-breakout https://www.velleman.eu/downloads/29/infosheets/sh1106_datasheet.pdf https://arduino.stackexchange.com/a/78773/82803","title":"References"},{"location":"references/#references","text":"https://www.seeedstudio.com/blog/2019/10/09/voltage-dividers-everything-you-need-to-know/ https://cdn-learn.adafruit.com/downloads/pdf/adafruit-feather-huzzah-esp8266.pdf http://web.mit.edu/evt/summary_battery_specifications.pdf https://dronebotworkshop.com/dc-volt-current/#Voltage_References https://learn.adafruit.com/using-ifttt-with-adafruit-io/arduino-code-2 https://learn.adafruit.com/using-ifttt-with-adafruit-io/wiring#battery-tracking https://siytek.com/arduino-cli-raspberry-pi/ https://www.best-microcontroller-projects.com/tp4056-page2.html https://en.wikipedia.org/wiki/Nickel%E2%80%93metal_hydride_battery https://arduino.github.io/arduino-cli/ https://www.electronicshub.org/solar-battery-charger-for-18650/ https://create.arduino.cc/projecthub/B45i/getting-started-with-arduino-cli-7652a5 https://github.com/webdevops/go-replace https://arduino-esp8266.readthedocs.io/en/latest/index.html https://roboticsbackend.com/arduino-store-array-into-eeprom/ https://www.arduino.cc/en/Tutorial/BuiltInExamples/Debounce https://www.arduino.cc/en/Tutorial/BuiltInExamples/StateChangeDetection https://github.com/esp8266/Arduino/tree/master/libraries/EEPROM https://support.microsoft.com/en-us/office/slope-function-11fb8f97-3117-4813-98aa-61d7e01276b9 https://github.com/arduino-libraries/NTPClient/blob/master/examples/Basic/Basic.ino https://www.mathworks.com/help/thingspeak/use-ifttt-to-send-text-message-notification.html?searchHighlight=ifttt&s_tid=srchtitle_ifttt_1 https://www.mathworks.com/help/thingspeak/read-data-for-regression-analysis.html https://electronics.stackexchange.com/questions/307586/need-help-calibrating-adc-input-using-a-voltage-divider https://learn.adafruit.com/adafruit-bq24074-universal-usb-dc-solar-charger-breakout https://www.velleman.eu/downloads/29/infosheets/sh1106_datasheet.pdf https://arduino.stackexchange.com/a/78773/82803","title":"&nbsp; References"},{"location":"troubleshooting/","text":"Troubleshooting \u00b6 Error during build: platform not installed \u00b6 Error during build: platform not installed Fix arduino-cli core install esp8266:esp8266 The internal LED is dim and the console is blank when connected to a computer via USB \u00b6 Fix: The Feather needs to be reset. Press the physical RESET button. Count not open port [Errno 16] Device or resource busy \u00b6 serial.serialutil.SerialException: [ Errno 16 ] could not open port /dev/ttyUSB0: [ Errno 16 ] Device or resource busy: '/dev/ttyUSB0' Error during Upload: Failed uploading: uploading error: exit status 1 Fix: The serial port is open and reading the output of the Feather. Close the connection Trouble installing Timezone_Generic library \u00b6 Manually install by changing config of enable_unsafe_install to true Download the latest release zip file. arduino-cli lib install --zip-path v1.9.1.zip Error during build: Missing FQBN (Fully Qualified Board Name) \u00b6 Error during build: Missing FQBN ( Fully Qualified Board Name ) Fix: Add the board ( -b ) parameter to compile or upload or add a sketch.json . fatal error: secrets.h: No such file or directory \u00b6 solar-battery-charger/solar-battery-charger.ino:20:10: fatal error: secrets.h: No such file or directory 20 | #include \"secrets.h\" | ^~~~~~~~~~~ compilation terminated. Error during build: exit status 1 Fix: The secrets.h file needs to be generated. See secrets to how to generate it. Won't connect to Wi-Fi \u00b6 There currently is not a timeout for the wifi connection and so the Feather will continue to try to connect in and endless loop. Internal LED continues to blink in intervals. Connecting to SSID: MySSID .............................. Fix: Ensure that the wifi credentials are correct. See secrets . ModuleNoteFoundError: No module named 'serial' \u00b6 Traceback ( most recent call last ) : File \"~/.arduino15/packages/esp32/tools/esptool_py/3.1.0/esptool.py\" , line 38 , in <module> import serial ModuleNotFoundError: No module named 'serial' sudo apt install python3-serial","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"troubleshooting/#error-during-build-platform-not-installed","text":"Error during build: platform not installed Fix arduino-cli core install esp8266:esp8266","title":"Error during build: platform not installed"},{"location":"troubleshooting/#the-internal-led-is-dim-and-the-console-is-blank-when-connected-to-a-computer-via-usb","text":"Fix: The Feather needs to be reset. Press the physical RESET button.","title":"The internal LED is dim and the console is blank when connected to a computer via USB"},{"location":"troubleshooting/#count-not-open-port-errno-16-device-or-resource-busy","text":"serial.serialutil.SerialException: [ Errno 16 ] could not open port /dev/ttyUSB0: [ Errno 16 ] Device or resource busy: '/dev/ttyUSB0' Error during Upload: Failed uploading: uploading error: exit status 1 Fix: The serial port is open and reading the output of the Feather. Close the connection","title":"Count not open port [Errno 16] Device or resource busy"},{"location":"troubleshooting/#trouble-installing-timezone_generic-library","text":"Manually install by changing config of enable_unsafe_install to true Download the latest release zip file. arduino-cli lib install --zip-path v1.9.1.zip","title":"Trouble installing Timezone_Generic library"},{"location":"troubleshooting/#error-during-build-missing-fqbn-fully-qualified-board-name","text":"Error during build: Missing FQBN ( Fully Qualified Board Name ) Fix: Add the board ( -b ) parameter to compile or upload or add a sketch.json .","title":"Error during build: Missing FQBN (Fully Qualified Board Name)"},{"location":"troubleshooting/#fatal-error-secretsh-no-such-file-or-directory","text":"solar-battery-charger/solar-battery-charger.ino:20:10: fatal error: secrets.h: No such file or directory 20 | #include \"secrets.h\" | ^~~~~~~~~~~ compilation terminated. Error during build: exit status 1 Fix: The secrets.h file needs to be generated. See secrets to how to generate it.","title":"fatal error: secrets.h: No such file or directory"},{"location":"troubleshooting/#wont-connect-to-wi-fi","text":"There currently is not a timeout for the wifi connection and so the Feather will continue to try to connect in and endless loop. Internal LED continues to blink in intervals. Connecting to SSID: MySSID .............................. Fix: Ensure that the wifi credentials are correct. See secrets .","title":"Won't connect to Wi-Fi"},{"location":"troubleshooting/#modulenotefounderror-no-module-named-serial","text":"Traceback ( most recent call last ) : File \"~/.arduino15/packages/esp32/tools/esptool_py/3.1.0/esptool.py\" , line 38 , in <module> import serial ModuleNotFoundError: No module named 'serial' sudo apt install python3-serial","title":"ModuleNoteFoundError: No module named 'serial'"},{"location":"test/adjusttime/","text":"adjusttime \u00b6 Sketch to verify operation of Timezone library. Sketch \u00b6 Sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 WIP Circuit \u00b6 Circuit made with Circuit Diagram Code \u00b6 Install the time library arduino-cli lib install time Install the Timezone_Generic library arduino-cli lib install Timezone_Generic See here if having trouble installing Timezone_Generic . Output \u00b6 Typical Output Start TZTest on ESP8266_ADAFRUIT_HUZZAH Timezone_Generic v1.9.1 -------- Apr-2018 time change -------- 13 :59:57 Sat 31 Mar 2018 UTC = 2 :59:57 Sun 1 Apr 2018 NZDT 13 :59:58 Sat 31 Mar 2018 UTC = 2 :59:58 Sun 1 Apr 2018 NZDT 13 :59:59 Sat 31 Mar 2018 UTC = 2 :59:59 Sun 1 Apr 2018 NZDT 14 : 0 : 0 Sat 31 Mar 2018 UTC = 2 : 0 : 0 Sun 1 Apr 2018 NZST 14 : 0 : 1 Sat 31 Mar 2018 UTC = 2 : 0 : 1 Sun 1 Apr 2018 NZST 14 : 0 : 2 Sat 31 Mar 2018 UTC = 2 : 0 : 2 Sun 1 Apr 2018 NZST -------- Apr-2018 time change -------- 13 :59:57 Sat 31 Mar 2018 UTC = 2 :59:57 Sun 1 Apr 2018 NZDT 13 :59:58 Sat 31 Mar 2018 UTC = 2 :59:58 Sun 1 Apr 2018 NZDT 13 :59:59 Sat 31 Mar 2018 UTC = 2 :59:59 Sun 1 Apr 2018 NZDT 14 : 0 : 0 Sat 31 Mar 2018 UTC = 2 : 0 : 0 Sun 1 Apr 2018 NZST 14 : 0 : 1 Sat 31 Mar 2018 UTC = 2 : 0 : 1 Sun 1 Apr 2018 NZST 14 : 0 : 2 Sat 31 Mar 2018 UTC = 2 : 0 : 2 Sun 1 Apr 2018 NZST -------- Sep-2018 time change -------- 13 :59:57 Sat 29 Sep 2018 UTC = 1 :59:57 Sun 30 Sep 2018 NZST 13 :59:58 Sat 29 Sep 2018 UTC = 1 :59:58 Sun 30 Sep 2018 NZST 13 :59:59 Sat 29 Sep 2018 UTC = 1 :59:59 Sun 30 Sep 2018 NZST 14 : 0 : 0 Sat 29 Sep 2018 UTC = 3 : 0 : 0 Sun 30 Sep 2018 NZDT 14 : 0 : 1 Sat 29 Sep 2018 UTC = 3 : 0 : 1 Sun 30 Sep 2018 NZDT 14 : 0 : 2 Sat 29 Sep 2018 UTC = 3 : 0 : 2 Sun 30 Sep 2018 NZDT -------- Apr-2019 time change -------- 13 :59:57 Sat 6 Apr 2019 UTC = 2 :59:57 Sun 7 Apr 2019 NZDT 13 :59:58 Sat 6 Apr 2019 UTC = 2 :59:58 Sun 7 Apr 2019 NZDT 13 :59:59 Sat 6 Apr 2019 UTC = 2 :59:59 Sun 7 Apr 2019 NZDT 14 : 0 : 0 Sat 6 Apr 2019 UTC = 2 : 0 : 0 Sun 7 Apr 2019 NZST 14 : 0 : 1 Sat 6 Apr 2019 UTC = 2 : 0 : 1 Sun 7 Apr 2019 NZST 14 : 0 : 2 Sat 6 Apr 2019 UTC = 2 : 0 : 2 Sun 7 Apr 2019 NZST -------- Sep-2019 time change -------- 13 :59:57 Sat 28 Sep 2019 UTC = 1 :59:57 Sun 29 Sep 2019 NZST 13 :59:58 Sat 28 Sep 2019 UTC = 1 :59:58 Sun 29 Sep 2019 NZST 13 :59:59 Sat 28 Sep 2019 UTC = 1 :59:59 Sun 29 Sep 2019 NZST 14 : 0 : 0 Sat 28 Sep 2019 UTC = 3 : 0 : 0 Sun 29 Sep 2019 NZDT 14 : 0 : 1 Sat 28 Sep 2019 UTC = 3 : 0 : 1 Sun 29 Sep 2019 NZDT 14 : 0 : 2 Sat 28 Sep 2019 UTC = 3 : 0 : 2 Sun 29 Sep 2019 NZDT -------- Apr-2020 time change -------- 13 :59:57 Sat 4 Apr 2020 UTC = 2 :59:57 Sun 5 Apr 2020 NZDT 13 :59:58 Sat 4 Apr 2020 UTC = 2 :59:58 Sun 5 Apr 2020 NZDT 13 :59:59 Sat 4 Apr 2020 UTC = 2 :59:59 Sun 5 Apr 2020 NZDT 14 : 0 : 0 Sat 4 Apr 2020 UTC = 2 : 0 : 0 Sun 5 Apr 2020 NZST 14 : 0 : 1 Sat 4 Apr 2020 UTC = 2 : 0 : 1 Sun 5 Apr 2020 NZST 14 : 0 : 2 Sat 4 Apr 2020 UTC = 2 : 0 : 2 Sun 5 Apr 2020 NZST -------- Sep-2020 time change -------- 13 :59:57 Sat 26 Sep 2020 UTC = 1 :59:57 Sun 27 Sep 2020 NZST 13 :59:58 Sat 26 Sep 2020 UTC = 1 :59:58 Sun 27 Sep 2020 NZST 13 :59:59 Sat 26 Sep 2020 UTC = 1 :59:59 Sun 27 Sep 2020 NZST 14 : 0 : 0 Sat 26 Sep 2020 UTC = 3 : 0 : 0 Sun 27 Sep 2020 NZDT 14 : 0 : 1 Sat 26 Sep 2020 UTC = 3 : 0 : 1 Sun 27 Sep 2020 NZDT 14 : 0 : 2 Sat 26 Sep 2020 UTC = 3 : 0 : 2 Sun 27 Sep 2020 NZDT -------- Mar-2018 time change -------- 6 :59:57 Sun 11 Mar 2018 UTC = 1 :59:57 Sun 11 Mar 2018 EST 6 :59:58 Sun 11 Mar 2018 UTC = 1 :59:58 Sun 11 Mar 2018 EST 6 :59:59 Sun 11 Mar 2018 UTC = 1 :59:59 Sun 11 Mar 2018 EST 7 : 0 : 0 Sun 11 Mar 2018 UTC = 3 : 0 : 0 Sun 11 Mar 2018 EDT 7 : 0 : 1 Sun 11 Mar 2018 UTC = 3 : 0 : 1 Sun 11 Mar 2018 EDT 7 : 0 : 2 Sun 11 Mar 2018 UTC = 3 : 0 : 2 Sun 11 Mar 2018 EDT -------- Nov-2018 time change -------- 5 :59:57 Sun 4 Nov 2018 UTC = 1 :59:57 Sun 4 Nov 2018 EDT 5 :59:58 Sun 4 Nov 2018 UTC = 1 :59:58 Sun 4 Nov 2018 EDT 5 :59:59 Sun 4 Nov 2018 UTC = 1 :59:59 Sun 4 Nov 2018 EDT 6 : 0 : 0 Sun 4 Nov 2018 UTC = 1 : 0 : 0 Sun 4 Nov 2018 EST 6 : 0 : 1 Sun 4 Nov 2018 UTC = 1 : 0 : 1 Sun 4 Nov 2018 EST 6 : 0 : 2 Sun 4 Nov 2018 UTC = 1 : 0 : 2 Sun 4 Nov 2018 EST -------- Mar-2019 time change -------- 6 :59:57 Sun 10 Mar 2019 UTC = 1 :59:57 Sun 10 Mar 2019 EST 6 :59:58 Sun 10 Mar 2019 UTC = 1 :59:58 Sun 10 Mar 2019 EST 6 :59:59 Sun 10 Mar 2019 UTC = 1 :59:59 Sun 10 Mar 2019 EST 7 : 0 : 0 Sun 10 Mar 2019 UTC = 3 : 0 : 0 Sun 10 Mar 2019 EDT 7 : 0 : 1 Sun 10 Mar 2019 UTC = 3 : 0 : 1 Sun 10 Mar 2019 EDT 7 : 0 : 2 Sun 10 Mar 2019 UTC = 3 : 0 : 2 Sun 10 Mar 2019 EDT -------- Nov-2019 time change -------- 5 :59:57 Sun 3 Nov 2019 UTC = 1 :59:57 Sun 3 Nov 2019 EDT 5 :59:58 Sun 3 Nov 2019 UTC = 1 :59:58 Sun 3 Nov 2019 EDT 5 :59:59 Sun 3 Nov 2019 UTC = 1 :59:59 Sun 3 Nov 2019 EDT 6 : 0 : 0 Sun 3 Nov 2019 UTC = 1 : 0 : 0 Sun 3 Nov 2019 EST 6 : 0 : 1 Sun 3 Nov 2019 UTC = 1 : 0 : 1 Sun 3 Nov 2019 EST 6 : 0 : 2 Sun 3 Nov 2019 UTC = 1 : 0 : 2 Sun 3 Nov 2019 EST -------- Mar-2020 time change -------- 6 :59:57 Sun 8 Mar 2020 UTC = 1 :59:57 Sun 8 Mar 2020 EST 6 :59:58 Sun 8 Mar 2020 UTC = 1 :59:58 Sun 8 Mar 2020 EST 6 :59:59 Sun 8 Mar 2020 UTC = 1 :59:59 Sun 8 Mar 2020 EST 7 : 0 : 0 Sun 8 Mar 2020 UTC = 3 : 0 : 0 Sun 8 Mar 2020 EDT 7 : 0 : 1 Sun 8 Mar 2020 UTC = 3 : 0 : 1 Sun 8 Mar 2020 EDT 7 : 0 : 2 Sun 8 Mar 2020 UTC = 3 : 0 : 2 Sun 8 Mar 2020 EDT -------- Nov-2020 time change -------- 5 :59:57 Sun 1 Nov 2020 UTC = 1 :59:57 Sun 1 Nov 2020 EDT 5 :59:58 Sun 1 Nov 2020 UTC = 1 :59:58 Sun 1 Nov 2020 EDT 5 :59:59 Sun 1 Nov 2020 UTC = 1 :59:59 Sun 1 Nov 2020 EDT 6 : 0 : 0 Sun 1 Nov 2020 UTC = 1 : 0 : 0 Sun 1 Nov 2020 EST 6 : 0 : 1 Sun 1 Nov 2020 UTC = 1 : 0 : 1 Sun 1 Nov 2020 EST 6 : 0 : 2 Sun 1 Nov 2020 UTC = 1 : 0 : 2 Sun 1 Nov 2020 EST ... Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 https://github.com/khoih-prog/Timezone_Generic/blob/523402eee8e74a6499431b59afd81d12cfce032d/examples/tzTest/tzTest.ino https://forum.arduino.cc/t/loading-my-p-c-time-and-date-into-the-arduino-during-the-programing/586028/5","title":"adjusttime"},{"location":"test/adjusttime/#adjusttime","text":"Sketch to verify operation of Timezone library.","title":"adjusttime"},{"location":"test/adjusttime/#sketch","text":"Sketch can be found here .","title":"Sketch"},{"location":"test/adjusttime/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/adjusttime/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/adjusttime/#procedure","text":"WIP","title":"Procedure"},{"location":"test/adjusttime/#circuit","text":"Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/adjusttime/#code","text":"Install the time library arduino-cli lib install time Install the Timezone_Generic library arduino-cli lib install Timezone_Generic See here if having trouble installing Timezone_Generic .","title":"Code"},{"location":"test/adjusttime/#output","text":"Typical Output Start TZTest on ESP8266_ADAFRUIT_HUZZAH Timezone_Generic v1.9.1 -------- Apr-2018 time change -------- 13 :59:57 Sat 31 Mar 2018 UTC = 2 :59:57 Sun 1 Apr 2018 NZDT 13 :59:58 Sat 31 Mar 2018 UTC = 2 :59:58 Sun 1 Apr 2018 NZDT 13 :59:59 Sat 31 Mar 2018 UTC = 2 :59:59 Sun 1 Apr 2018 NZDT 14 : 0 : 0 Sat 31 Mar 2018 UTC = 2 : 0 : 0 Sun 1 Apr 2018 NZST 14 : 0 : 1 Sat 31 Mar 2018 UTC = 2 : 0 : 1 Sun 1 Apr 2018 NZST 14 : 0 : 2 Sat 31 Mar 2018 UTC = 2 : 0 : 2 Sun 1 Apr 2018 NZST -------- Apr-2018 time change -------- 13 :59:57 Sat 31 Mar 2018 UTC = 2 :59:57 Sun 1 Apr 2018 NZDT 13 :59:58 Sat 31 Mar 2018 UTC = 2 :59:58 Sun 1 Apr 2018 NZDT 13 :59:59 Sat 31 Mar 2018 UTC = 2 :59:59 Sun 1 Apr 2018 NZDT 14 : 0 : 0 Sat 31 Mar 2018 UTC = 2 : 0 : 0 Sun 1 Apr 2018 NZST 14 : 0 : 1 Sat 31 Mar 2018 UTC = 2 : 0 : 1 Sun 1 Apr 2018 NZST 14 : 0 : 2 Sat 31 Mar 2018 UTC = 2 : 0 : 2 Sun 1 Apr 2018 NZST -------- Sep-2018 time change -------- 13 :59:57 Sat 29 Sep 2018 UTC = 1 :59:57 Sun 30 Sep 2018 NZST 13 :59:58 Sat 29 Sep 2018 UTC = 1 :59:58 Sun 30 Sep 2018 NZST 13 :59:59 Sat 29 Sep 2018 UTC = 1 :59:59 Sun 30 Sep 2018 NZST 14 : 0 : 0 Sat 29 Sep 2018 UTC = 3 : 0 : 0 Sun 30 Sep 2018 NZDT 14 : 0 : 1 Sat 29 Sep 2018 UTC = 3 : 0 : 1 Sun 30 Sep 2018 NZDT 14 : 0 : 2 Sat 29 Sep 2018 UTC = 3 : 0 : 2 Sun 30 Sep 2018 NZDT -------- Apr-2019 time change -------- 13 :59:57 Sat 6 Apr 2019 UTC = 2 :59:57 Sun 7 Apr 2019 NZDT 13 :59:58 Sat 6 Apr 2019 UTC = 2 :59:58 Sun 7 Apr 2019 NZDT 13 :59:59 Sat 6 Apr 2019 UTC = 2 :59:59 Sun 7 Apr 2019 NZDT 14 : 0 : 0 Sat 6 Apr 2019 UTC = 2 : 0 : 0 Sun 7 Apr 2019 NZST 14 : 0 : 1 Sat 6 Apr 2019 UTC = 2 : 0 : 1 Sun 7 Apr 2019 NZST 14 : 0 : 2 Sat 6 Apr 2019 UTC = 2 : 0 : 2 Sun 7 Apr 2019 NZST -------- Sep-2019 time change -------- 13 :59:57 Sat 28 Sep 2019 UTC = 1 :59:57 Sun 29 Sep 2019 NZST 13 :59:58 Sat 28 Sep 2019 UTC = 1 :59:58 Sun 29 Sep 2019 NZST 13 :59:59 Sat 28 Sep 2019 UTC = 1 :59:59 Sun 29 Sep 2019 NZST 14 : 0 : 0 Sat 28 Sep 2019 UTC = 3 : 0 : 0 Sun 29 Sep 2019 NZDT 14 : 0 : 1 Sat 28 Sep 2019 UTC = 3 : 0 : 1 Sun 29 Sep 2019 NZDT 14 : 0 : 2 Sat 28 Sep 2019 UTC = 3 : 0 : 2 Sun 29 Sep 2019 NZDT -------- Apr-2020 time change -------- 13 :59:57 Sat 4 Apr 2020 UTC = 2 :59:57 Sun 5 Apr 2020 NZDT 13 :59:58 Sat 4 Apr 2020 UTC = 2 :59:58 Sun 5 Apr 2020 NZDT 13 :59:59 Sat 4 Apr 2020 UTC = 2 :59:59 Sun 5 Apr 2020 NZDT 14 : 0 : 0 Sat 4 Apr 2020 UTC = 2 : 0 : 0 Sun 5 Apr 2020 NZST 14 : 0 : 1 Sat 4 Apr 2020 UTC = 2 : 0 : 1 Sun 5 Apr 2020 NZST 14 : 0 : 2 Sat 4 Apr 2020 UTC = 2 : 0 : 2 Sun 5 Apr 2020 NZST -------- Sep-2020 time change -------- 13 :59:57 Sat 26 Sep 2020 UTC = 1 :59:57 Sun 27 Sep 2020 NZST 13 :59:58 Sat 26 Sep 2020 UTC = 1 :59:58 Sun 27 Sep 2020 NZST 13 :59:59 Sat 26 Sep 2020 UTC = 1 :59:59 Sun 27 Sep 2020 NZST 14 : 0 : 0 Sat 26 Sep 2020 UTC = 3 : 0 : 0 Sun 27 Sep 2020 NZDT 14 : 0 : 1 Sat 26 Sep 2020 UTC = 3 : 0 : 1 Sun 27 Sep 2020 NZDT 14 : 0 : 2 Sat 26 Sep 2020 UTC = 3 : 0 : 2 Sun 27 Sep 2020 NZDT -------- Mar-2018 time change -------- 6 :59:57 Sun 11 Mar 2018 UTC = 1 :59:57 Sun 11 Mar 2018 EST 6 :59:58 Sun 11 Mar 2018 UTC = 1 :59:58 Sun 11 Mar 2018 EST 6 :59:59 Sun 11 Mar 2018 UTC = 1 :59:59 Sun 11 Mar 2018 EST 7 : 0 : 0 Sun 11 Mar 2018 UTC = 3 : 0 : 0 Sun 11 Mar 2018 EDT 7 : 0 : 1 Sun 11 Mar 2018 UTC = 3 : 0 : 1 Sun 11 Mar 2018 EDT 7 : 0 : 2 Sun 11 Mar 2018 UTC = 3 : 0 : 2 Sun 11 Mar 2018 EDT -------- Nov-2018 time change -------- 5 :59:57 Sun 4 Nov 2018 UTC = 1 :59:57 Sun 4 Nov 2018 EDT 5 :59:58 Sun 4 Nov 2018 UTC = 1 :59:58 Sun 4 Nov 2018 EDT 5 :59:59 Sun 4 Nov 2018 UTC = 1 :59:59 Sun 4 Nov 2018 EDT 6 : 0 : 0 Sun 4 Nov 2018 UTC = 1 : 0 : 0 Sun 4 Nov 2018 EST 6 : 0 : 1 Sun 4 Nov 2018 UTC = 1 : 0 : 1 Sun 4 Nov 2018 EST 6 : 0 : 2 Sun 4 Nov 2018 UTC = 1 : 0 : 2 Sun 4 Nov 2018 EST -------- Mar-2019 time change -------- 6 :59:57 Sun 10 Mar 2019 UTC = 1 :59:57 Sun 10 Mar 2019 EST 6 :59:58 Sun 10 Mar 2019 UTC = 1 :59:58 Sun 10 Mar 2019 EST 6 :59:59 Sun 10 Mar 2019 UTC = 1 :59:59 Sun 10 Mar 2019 EST 7 : 0 : 0 Sun 10 Mar 2019 UTC = 3 : 0 : 0 Sun 10 Mar 2019 EDT 7 : 0 : 1 Sun 10 Mar 2019 UTC = 3 : 0 : 1 Sun 10 Mar 2019 EDT 7 : 0 : 2 Sun 10 Mar 2019 UTC = 3 : 0 : 2 Sun 10 Mar 2019 EDT -------- Nov-2019 time change -------- 5 :59:57 Sun 3 Nov 2019 UTC = 1 :59:57 Sun 3 Nov 2019 EDT 5 :59:58 Sun 3 Nov 2019 UTC = 1 :59:58 Sun 3 Nov 2019 EDT 5 :59:59 Sun 3 Nov 2019 UTC = 1 :59:59 Sun 3 Nov 2019 EDT 6 : 0 : 0 Sun 3 Nov 2019 UTC = 1 : 0 : 0 Sun 3 Nov 2019 EST 6 : 0 : 1 Sun 3 Nov 2019 UTC = 1 : 0 : 1 Sun 3 Nov 2019 EST 6 : 0 : 2 Sun 3 Nov 2019 UTC = 1 : 0 : 2 Sun 3 Nov 2019 EST -------- Mar-2020 time change -------- 6 :59:57 Sun 8 Mar 2020 UTC = 1 :59:57 Sun 8 Mar 2020 EST 6 :59:58 Sun 8 Mar 2020 UTC = 1 :59:58 Sun 8 Mar 2020 EST 6 :59:59 Sun 8 Mar 2020 UTC = 1 :59:59 Sun 8 Mar 2020 EST 7 : 0 : 0 Sun 8 Mar 2020 UTC = 3 : 0 : 0 Sun 8 Mar 2020 EDT 7 : 0 : 1 Sun 8 Mar 2020 UTC = 3 : 0 : 1 Sun 8 Mar 2020 EDT 7 : 0 : 2 Sun 8 Mar 2020 UTC = 3 : 0 : 2 Sun 8 Mar 2020 EDT -------- Nov-2020 time change -------- 5 :59:57 Sun 1 Nov 2020 UTC = 1 :59:57 Sun 1 Nov 2020 EDT 5 :59:58 Sun 1 Nov 2020 UTC = 1 :59:58 Sun 1 Nov 2020 EDT 5 :59:59 Sun 1 Nov 2020 UTC = 1 :59:59 Sun 1 Nov 2020 EDT 6 : 0 : 0 Sun 1 Nov 2020 UTC = 1 : 0 : 0 Sun 1 Nov 2020 EST 6 : 0 : 1 Sun 1 Nov 2020 UTC = 1 : 0 : 1 Sun 1 Nov 2020 EST 6 : 0 : 2 Sun 1 Nov 2020 UTC = 1 : 0 : 2 Sun 1 Nov 2020 EST ...","title":"Output"},{"location":"test/adjusttime/#analysis","text":"WIP","title":"Analysis"},{"location":"test/adjusttime/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/adjusttime/#references","text":"https://github.com/khoih-prog/Timezone_Generic/blob/523402eee8e74a6499431b59afd81d12cfce032d/examples/tzTest/tzTest.ino https://forum.arduino.cc/t/loading-my-p-c-time-and-date-into-the-arduino-during-the-programing/586028/5","title":"References"},{"location":"test/animation/","text":"animation \u00b6 Test the Adafruit 128x64 OLED FeatherWing display with an animation. Sketch \u00b6 The sketch can be found here Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 WIP Circuit \u00b6 WIP Circuit made with Circuit Diagram Code \u00b6 Install Adafruit SH110X library arduino-cli lib install \"Adafruit SH110X\" Install Adafruit GFX Library arduino-cli lib install \"Adafruit GFX Library\" Output \u00b6 WIP Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 https://create.arduino.cc/projecthub/mdraber/create-animation-for-128x32-oled-ssd1306-with-arduino-5cf5f5 http://adafruit.github.io/Adafruit-GFX-Library/html/index.html https://adafruit.github.io/Adafruit_SH110x/html/index.html https://javl.github.io/image2cpp/","title":"animation"},{"location":"test/animation/#animation","text":"Test the Adafruit 128x64 OLED FeatherWing display with an animation.","title":"animation"},{"location":"test/animation/#sketch","text":"The sketch can be found here","title":"Sketch"},{"location":"test/animation/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/animation/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/animation/#procedure","text":"WIP","title":"Procedure"},{"location":"test/animation/#circuit","text":"WIP Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/animation/#code","text":"Install Adafruit SH110X library arduino-cli lib install \"Adafruit SH110X\" Install Adafruit GFX Library arduino-cli lib install \"Adafruit GFX Library\"","title":"Code"},{"location":"test/animation/#output","text":"WIP","title":"Output"},{"location":"test/animation/#analysis","text":"WIP","title":"Analysis"},{"location":"test/animation/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/animation/#references","text":"https://create.arduino.cc/projecthub/mdraber/create-animation-for-128x32-oled-ssd1306-with-arduino-5cf5f5 http://adafruit.github.io/Adafruit-GFX-Library/html/index.html https://adafruit.github.io/Adafruit_SH110x/html/index.html https://javl.github.io/image2cpp/","title":"References"},{"location":"test/battery/","text":"battery \u00b6 Reads value on analog input A0 and calculates the the percent level of a lipo battery. Sketch \u00b6 Sketch can be found here . Hypothesis \u00b6 The Adafruit Feather Huzzah can be used to monitor the level of a lipo battery. Assumptions \u00b6 WIP Procedure \u00b6 Circuit \u00b6 Connect a 3.7V lipo battery to the Adafruit Feather Huzzah and create a voltage divider using a 1M\u03a9 and 220k\u03a9 resistor. Circuit made with Circuit Diagram Code \u00b6 WIP Output \u00b6 Battery level: 62 % Battery level: 62 % Battery level: 62 % Battery level: 62 % ... Analysis \u00b6 WIP Conclusion \u00b6 WIP Troubleshooting \u00b6 WIP References \u00b6 https://learn.adafruit.com/using-ifttt-with-adafruit-io/wiring#battery-tracking","title":"battery"},{"location":"test/battery/#battery","text":"Reads value on analog input A0 and calculates the the percent level of a lipo battery.","title":"battery"},{"location":"test/battery/#sketch","text":"Sketch can be found here .","title":"Sketch"},{"location":"test/battery/#hypothesis","text":"The Adafruit Feather Huzzah can be used to monitor the level of a lipo battery.","title":"Hypothesis"},{"location":"test/battery/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/battery/#procedure","text":"","title":"Procedure"},{"location":"test/battery/#circuit","text":"Connect a 3.7V lipo battery to the Adafruit Feather Huzzah and create a voltage divider using a 1M\u03a9 and 220k\u03a9 resistor. Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/battery/#code","text":"WIP","title":"Code"},{"location":"test/battery/#output","text":"Battery level: 62 % Battery level: 62 % Battery level: 62 % Battery level: 62 % ...","title":"Output"},{"location":"test/battery/#analysis","text":"WIP","title":"Analysis"},{"location":"test/battery/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/battery/#troubleshooting","text":"WIP","title":"Troubleshooting"},{"location":"test/battery/#references","text":"https://learn.adafruit.com/using-ifttt-with-adafruit-io/wiring#battery-tracking","title":"References"},{"location":"test/blink/","text":"blink \u00b6 Blink the built in LED without a delay. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 WIP Circuit \u00b6 Use the built in red LED. Circuit made with Circuit Diagram Code \u00b6 WIP Output \u00b6 The built in red LED blinks continuously for in the specifed interval. Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 https://www.arduino.cc/en/Tutorial/BuiltInExamples/BlinkWithoutDelay","title":"blink"},{"location":"test/blink/#blink","text":"Blink the built in LED without a delay.","title":"blink"},{"location":"test/blink/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/blink/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/blink/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/blink/#procedure","text":"WIP","title":"Procedure"},{"location":"test/blink/#circuit","text":"Use the built in red LED. Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/blink/#code","text":"WIP","title":"Code"},{"location":"test/blink/#output","text":"The built in red LED blinks continuously for in the specifed interval.","title":"Output"},{"location":"test/blink/#analysis","text":"WIP","title":"Analysis"},{"location":"test/blink/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/blink/#references","text":"https://www.arduino.cc/en/Tutorial/BuiltInExamples/BlinkWithoutDelay","title":"References"},{"location":"test/cell/","text":"cell \u00b6 Measure the voltage and current of a single solar panel cell. Hypothesis \u00b6 The output of a single solar cell is around 2V and 200 mA based on a similar sized cell. The solar cells were salvaged from some outdoor solar landscape lights that were replaced by hardwired ones. The voltage and current of the cells were unknown and so this test is meant to measure them. The cells are 57mm x 57mm and these ones on Amazon are 50mm x 50mm which is similar in size. The Amazon ones are 2V and 160mA and so I estimated that the 57mm ones are around 2V and 200 mA . Assumptions \u00b6 The multimeter is accurate. Ohm's Law is valid. The resistor can handle the power dissipation. The average solar radiation intensity at latitude 33.6020861 is 1000 W/m2. Procedure \u00b6 Circuit \u00b6 Connect a 20\u03a9 resistor to a solar cell. Circuit made with Circuit Diagram Output \u00b6 Measure the actual resistance of the resistor. Measure the voltage across the resistor when the cell is in direct sun light. \\[ Resistance=20\u03a9 \\] \\[ Voltage=2.212V \\] Analysis \u00b6 Current \u00b6 The current through the resistor can be calculated using Ohm's law . \\[ I=\\frac{V}{R} \\] Using our measure values. \\[ I=\\frac{2.212V}{20\u03a9} \\] \\[ \\boxed{I=0.111A} \\] Power \u00b6 The power through the resistor can be calculated using the following formula. \\[ P=IV \\] Using our measure values. \\[ P=0.111A\\times2.212V \\] \\[ \\boxed{P=0.25W} \\] Efficiency \u00b6 According to this site , the average solar radiation intensity is \"1000 W/m2 on a clear day at solar noon in the summer months\" at the Woods Hole Oceanographic Institution lattitude which is, 41.5255063. \\[ solar\\;radiation\\;intensity = 1000 \\frac{W}{m^2} \\] I know that there are a lot of factors that go into this value but this can be used as a very rough starting point. \\[ solar\\;radiation\\;intensity=\\frac{0.25W}{(57mm)^2}\\times\\frac{(1000mm)^2}{1m^2} \\] \\[ \\boxed{solar\\;radiation\\;intensity=77\\frac{W}{m^2}} \\] \\[ efficiency=\\frac{77\\frac{W}{m^2}}{1000\\frac{W}{m^2}} \\] \\[ \\boxed{efficiency=7.7\\%} \\] Conclusion \u00b6 The overall voltage, current, and power of the cell was less than expecting when compared to the smaller one found on Amazon. Some reasons include the cell being cloudy and dirty, therefore not allowing the most light to get to the solar cells and the light intensity outside during testing was not the same as what the Amazon cells were tested at. Overall, these cells should be sufficient and a good starting point to design the solar panel . Troubleshooting \u00b6 WIP Deconstruction \u00b6 As stated above, the solare cells were salvaged from outdoor solar LED lights. Remove the top of the light from the glass housing. Remove the lid by unscrewing the philips screws. Snip the wires to the solar cell. Remove the caulking with a flathead screwdriver. The top of the light with the solar cell. Use a flathead screwdriver to pry underneath the cell to dislodge the adhesive. It's easiest if the top is rotated while holding the screwdriver. The solar cell removed from the top. Use a razor blade to remove the rest of the adhesive and caulking. A wire brush and a little water can also be used to remove the rest of the caulking. References \u00b6 WIP","title":"cell"},{"location":"test/cell/#cell","text":"Measure the voltage and current of a single solar panel cell.","title":"cell"},{"location":"test/cell/#hypothesis","text":"The output of a single solar cell is around 2V and 200 mA based on a similar sized cell. The solar cells were salvaged from some outdoor solar landscape lights that were replaced by hardwired ones. The voltage and current of the cells were unknown and so this test is meant to measure them. The cells are 57mm x 57mm and these ones on Amazon are 50mm x 50mm which is similar in size. The Amazon ones are 2V and 160mA and so I estimated that the 57mm ones are around 2V and 200 mA .","title":"Hypothesis"},{"location":"test/cell/#assumptions","text":"The multimeter is accurate. Ohm's Law is valid. The resistor can handle the power dissipation. The average solar radiation intensity at latitude 33.6020861 is 1000 W/m2.","title":"Assumptions"},{"location":"test/cell/#procedure","text":"","title":"Procedure"},{"location":"test/cell/#circuit","text":"Connect a 20\u03a9 resistor to a solar cell. Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/cell/#output","text":"Measure the actual resistance of the resistor. Measure the voltage across the resistor when the cell is in direct sun light. \\[ Resistance=20\u03a9 \\] \\[ Voltage=2.212V \\]","title":"Output"},{"location":"test/cell/#analysis","text":"","title":"Analysis"},{"location":"test/cell/#current","text":"The current through the resistor can be calculated using Ohm's law . \\[ I=\\frac{V}{R} \\] Using our measure values. \\[ I=\\frac{2.212V}{20\u03a9} \\] \\[ \\boxed{I=0.111A} \\]","title":"Current"},{"location":"test/cell/#power","text":"The power through the resistor can be calculated using the following formula. \\[ P=IV \\] Using our measure values. \\[ P=0.111A\\times2.212V \\] \\[ \\boxed{P=0.25W} \\]","title":"Power"},{"location":"test/cell/#efficiency","text":"According to this site , the average solar radiation intensity is \"1000 W/m2 on a clear day at solar noon in the summer months\" at the Woods Hole Oceanographic Institution lattitude which is, 41.5255063. \\[ solar\\;radiation\\;intensity = 1000 \\frac{W}{m^2} \\] I know that there are a lot of factors that go into this value but this can be used as a very rough starting point. \\[ solar\\;radiation\\;intensity=\\frac{0.25W}{(57mm)^2}\\times\\frac{(1000mm)^2}{1m^2} \\] \\[ \\boxed{solar\\;radiation\\;intensity=77\\frac{W}{m^2}} \\] \\[ efficiency=\\frac{77\\frac{W}{m^2}}{1000\\frac{W}{m^2}} \\] \\[ \\boxed{efficiency=7.7\\%} \\]","title":"Efficiency"},{"location":"test/cell/#conclusion","text":"The overall voltage, current, and power of the cell was less than expecting when compared to the smaller one found on Amazon. Some reasons include the cell being cloudy and dirty, therefore not allowing the most light to get to the solar cells and the light intensity outside during testing was not the same as what the Amazon cells were tested at. Overall, these cells should be sufficient and a good starting point to design the solar panel .","title":"Conclusion"},{"location":"test/cell/#troubleshooting","text":"WIP","title":"Troubleshooting"},{"location":"test/cell/#deconstruction","text":"As stated above, the solare cells were salvaged from outdoor solar LED lights. Remove the top of the light from the glass housing. Remove the lid by unscrewing the philips screws. Snip the wires to the solar cell. Remove the caulking with a flathead screwdriver. The top of the light with the solar cell. Use a flathead screwdriver to pry underneath the cell to dislodge the adhesive. It's easiest if the top is rotated while holding the screwdriver. The solar cell removed from the top. Use a razor blade to remove the rest of the adhesive and caulking. A wire brush and a little water can also be used to remove the rest of the caulking.","title":"Deconstruction"},{"location":"test/cell/#references","text":"WIP","title":"References"},{"location":"test/clear/","text":"clear \u00b6 Clear a ThingSpeak channel. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 Circuit \u00b6 Circuit made with Circuit Diagram . Code \u00b6 Add SECRET_USER_APIKEY to secrets.h . This can be obtained from the ThingSpeak profile page . Update fingerprint in the sketch with the SHA-1 fingerprint in the sketch if it is out of date. The recent fingerprint can be obtained by looking the certificate in Google Chrome . Output \u00b6 test: clear Connecting to SSID: MySSID .connected IP Address: 192 .168.1.77 Hostname: Feather [ HTTPS ] begin... http code: 200 status: success Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 https://www.mathworks.com/help/thingspeak/clearchannel.html","title":"clear"},{"location":"test/clear/#clear","text":"Clear a ThingSpeak channel.","title":"clear"},{"location":"test/clear/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/clear/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/clear/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/clear/#procedure","text":"","title":"Procedure"},{"location":"test/clear/#circuit","text":"Circuit made with Circuit Diagram .","title":"Circuit"},{"location":"test/clear/#code","text":"Add SECRET_USER_APIKEY to secrets.h . This can be obtained from the ThingSpeak profile page . Update fingerprint in the sketch with the SHA-1 fingerprint in the sketch if it is out of date. The recent fingerprint can be obtained by looking the certificate in Google Chrome .","title":"Code"},{"location":"test/clear/#output","text":"test: clear Connecting to SSID: MySSID .connected IP Address: 192 .168.1.77 Hostname: Feather [ HTTPS ] begin... http code: 200 status: success","title":"Output"},{"location":"test/clear/#analysis","text":"WIP","title":"Analysis"},{"location":"test/clear/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/clear/#references","text":"https://www.mathworks.com/help/thingspeak/clearchannel.html","title":"References"},{"location":"test/comparedates/","text":"comparedates \u00b6 Compares the createdAt date from Thingspeak and the current date at UTC. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 WIP Circuit \u00b6 Circuit made with Circuit Diagram Code \u00b6 WIP Output \u00b6 Typical Output test: comparedates Connecting to SSID: MySSID .connected IP Address: 192 .168.1.77 Hostname: Feather Starting UDP Local port: 8888 Waiting for sync Transmitting NTP Request us.pool.ntp.org: 44 .190.6.254 Receiving NTP Response CurrentDate: 2022 -02-07 CreatedAt: 2022 -02-07 2022 -02-07 is the same day as 2022 -02-07 going to sleep Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 WIP","title":"comparedates"},{"location":"test/comparedates/#comparedates","text":"Compares the createdAt date from Thingspeak and the current date at UTC.","title":"comparedates"},{"location":"test/comparedates/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/comparedates/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/comparedates/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/comparedates/#procedure","text":"WIP","title":"Procedure"},{"location":"test/comparedates/#circuit","text":"Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/comparedates/#code","text":"WIP","title":"Code"},{"location":"test/comparedates/#output","text":"Typical Output test: comparedates Connecting to SSID: MySSID .connected IP Address: 192 .168.1.77 Hostname: Feather Starting UDP Local port: 8888 Waiting for sync Transmitting NTP Request us.pool.ntp.org: 44 .190.6.254 Receiving NTP Response CurrentDate: 2022 -02-07 CreatedAt: 2022 -02-07 2022 -02-07 is the same day as 2022 -02-07 going to sleep","title":"Output"},{"location":"test/comparedates/#analysis","text":"WIP","title":"Analysis"},{"location":"test/comparedates/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/comparedates/#references","text":"WIP","title":"References"},{"location":"test/createdat/","text":"createdat \u00b6 Get the latest createdAt from ThinkSpeak. Sketch \u00b6 Sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 WIP Circuit \u00b6 Circuit made with Circuit Diagram Code \u00b6 WIP Output \u00b6 Typical Output test: createdat Connecting to SSID: MySSID ...connected IP Address: 192 .168.1.77 Hostname: Feather 2022 -02-07 2022 -02-07 is newer than 2002 -02-02 2022 -02-07 2022 -02-07 is newer than 2002 -02-02 2022 -02-07 2022 -02-07 is newer than 2002 -02-02 Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 https://arduino.stackexchange.com/a/63475","title":"createdat"},{"location":"test/createdat/#createdat","text":"Get the latest createdAt from ThinkSpeak.","title":"createdat"},{"location":"test/createdat/#sketch","text":"Sketch can be found here .","title":"Sketch"},{"location":"test/createdat/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/createdat/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/createdat/#procedure","text":"WIP","title":"Procedure"},{"location":"test/createdat/#circuit","text":"Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/createdat/#code","text":"WIP","title":"Code"},{"location":"test/createdat/#output","text":"Typical Output test: createdat Connecting to SSID: MySSID ...connected IP Address: 192 .168.1.77 Hostname: Feather 2022 -02-07 2022 -02-07 is newer than 2002 -02-02 2022 -02-07 2022 -02-07 is newer than 2002 -02-02 2022 -02-07 2022 -02-07 is newer than 2002 -02-02","title":"Output"},{"location":"test/createdat/#analysis","text":"WIP","title":"Analysis"},{"location":"test/createdat/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/createdat/#references","text":"https://arduino.stackexchange.com/a/63475","title":"References"},{"location":"test/date/","text":"date \u00b6 Connect to an NTP server and get the date. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 WIP Circuit \u00b6 Circuit made with Circuit Diagram Code \u00b6 WIP Output \u00b6 Typical Output test: date Connecting to SSID: MySSID ...connected IP Address: 192 .168.1.77 Hostname: ESP-2DCE0D Starting UDP Local port: 8888 Waiting for sync Transmitting NTP Request us.pool.ntp.org: 64 .79.100.197 Receiving NTP Response date: 2022 -02-07T03:50:59Z Going to sleep for 1 minutes Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 https://github.com/PaulStoffregen/Time/blob/a18e50dcea4ee17285d732d39e7bc559482d1d3d/examples/TimeNTP_ESP8266WiFi/TimeNTP_ESP8266WiFi.ino","title":"date"},{"location":"test/date/#date","text":"Connect to an NTP server and get the date.","title":"date"},{"location":"test/date/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/date/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/date/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/date/#procedure","text":"WIP","title":"Procedure"},{"location":"test/date/#circuit","text":"Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/date/#code","text":"WIP","title":"Code"},{"location":"test/date/#output","text":"Typical Output test: date Connecting to SSID: MySSID ...connected IP Address: 192 .168.1.77 Hostname: ESP-2DCE0D Starting UDP Local port: 8888 Waiting for sync Transmitting NTP Request us.pool.ntp.org: 64 .79.100.197 Receiving NTP Response date: 2022 -02-07T03:50:59Z Going to sleep for 1 minutes","title":"Output"},{"location":"test/date/#analysis","text":"WIP","title":"Analysis"},{"location":"test/date/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/date/#references","text":"https://github.com/PaulStoffregen/Time/blob/a18e50dcea4ee17285d732d39e7bc559482d1d3d/examples/TimeNTP_ESP8266WiFi/TimeNTP_ESP8266WiFi.ino","title":"References"},{"location":"test/eeprom/","text":"eeprom \u00b6 Stores values read from analog input 0 into the EEPROM. These values will stay in the EEPROM when the board is turned off and may be retrieved later by another sketch. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 A variable value is lost when the Feather goes into a deep sleep but can be stored and retrieved in the EEPROM. Assumptions \u00b6 WIP Procedure \u00b6 Circuit \u00b6 Same circuit as battery . Circuit made with Circuit Diagram Code \u00b6 The Feather takes a reading of the A0 pin, divides the value by 4 , prints the value, then saves it to the EEPROM . The Feather then goes into a deep sleep for a period of time. On next bootup, the same variable is printed to the console and the EEPROM saved values are retrieved and printed to the console. Output \u00b6 The Retrieved pin value of the current reading should match the Write pin value of the previous reading. The Retrieved didNotify of the current reading should match the Write didNotify of the previous reading. The Variable value should be 0 when the Feather wakes up again because the variable is not retained. rll\ufffd\ufffd | \ufffdl\ufffd | \ufffdl\ufffdb | \ufffd\ufffd\ufffd\ufffdr\ufffdb\ufffdb\ufffd\ufffdnn\ufffdlnn\ufffd\ufffd\ufffdbp\ufffd\ufffdlrlrlp\ufffdn\ufffd\ufffdl\ufffd\ufffdbn\ufffd | \ufffd\ufffd\ufffdb\ufffd\ufffdnn\ufffdl\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrr\ufffd ` p\ufffdn\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdbn\ufffd | \ufffdb\ufffd\ufffdnn\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrl ` r\ufffd\ufffdnrl ` \ufffd\ufffd\ufffdll ` \ufffdn\ufffdl eeprom Retrieved pin value: 239 Variable value: 0 Retrieved didNotify: 1 Write pin value: 240 Write didNotify: 0 EEPROM successfully committed rll\ufffd\ufffd | \ufffdl\ufffd | \ufffdl\ufffdb | \ufffd\ufffd\ufffd\ufffdr\ufffdb\ufffdb\ufffd\ufffdnn\ufffdlnn\ufffd\ufffd\ufffdbp\ufffd\ufffdlrlrlp\ufffdn\ufffd\ufffdl\ufffd\ufffdbn\ufffd | \ufffd\ufffd\ufffdb\ufffd\ufffdnn\ufffdl\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrr\ufffd ` p\ufffdn\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdbn\ufffd | \ufffdb\ufffd\ufffdnn\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrl ` r\ufffd\ufffdnrl ` \ufffd\ufffd\ufffdll ` \ufffdn\ufffdl eeprom Retrieved pin value: 240 Variable value: 0 Retrieved didNotify: 0 Write pin value: 240 Write didNotify: 1 EEPROM successfully committed ... Analysis \u00b6 Everything worked as expected. The original variable was reset to 0 after waking up from a deep sleep. The value was able to be successfully stored and retrieved in the EEPROM before and after the deep sleep respectively. Conclusion \u00b6 If a sketch uses the deep sleep mode and a previous values is to be used again, it firsts needs to be saved to the EEPROM and then retrieved on the next boot. Troubleshooting \u00b6 WIP References \u00b6 https://github.com/esp8266/Arduino/blob/9f536e68f8f3aa3ffae26493dd0a31e1957d2e81/libraries/EEPROM/examples/eeprom_write/eeprom_write.ino https://github.com/esp8266/Arduino/blob/9f536e68f8f3aa3ffae26493dd0a31e1957d2e81/libraries/EEPROM/examples/eeprom_read/eeprom_read.ino https://arduino.stackexchange.com/a/33363 https://forum.arduino.cc/t/two-newbie-questions-status-and-printing-a-boolean/77672/3","title":"eeprom"},{"location":"test/eeprom/#eeprom","text":"Stores values read from analog input 0 into the EEPROM. These values will stay in the EEPROM when the board is turned off and may be retrieved later by another sketch.","title":"eeprom"},{"location":"test/eeprom/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/eeprom/#hypothesis","text":"A variable value is lost when the Feather goes into a deep sleep but can be stored and retrieved in the EEPROM.","title":"Hypothesis"},{"location":"test/eeprom/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/eeprom/#procedure","text":"","title":"Procedure"},{"location":"test/eeprom/#circuit","text":"Same circuit as battery . Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/eeprom/#code","text":"The Feather takes a reading of the A0 pin, divides the value by 4 , prints the value, then saves it to the EEPROM . The Feather then goes into a deep sleep for a period of time. On next bootup, the same variable is printed to the console and the EEPROM saved values are retrieved and printed to the console.","title":"Code"},{"location":"test/eeprom/#output","text":"The Retrieved pin value of the current reading should match the Write pin value of the previous reading. The Retrieved didNotify of the current reading should match the Write didNotify of the previous reading. The Variable value should be 0 when the Feather wakes up again because the variable is not retained. rll\ufffd\ufffd | \ufffdl\ufffd | \ufffdl\ufffdb | \ufffd\ufffd\ufffd\ufffdr\ufffdb\ufffdb\ufffd\ufffdnn\ufffdlnn\ufffd\ufffd\ufffdbp\ufffd\ufffdlrlrlp\ufffdn\ufffd\ufffdl\ufffd\ufffdbn\ufffd | \ufffd\ufffd\ufffdb\ufffd\ufffdnn\ufffdl\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrr\ufffd ` p\ufffdn\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdbn\ufffd | \ufffdb\ufffd\ufffdnn\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrl ` r\ufffd\ufffdnrl ` \ufffd\ufffd\ufffdll ` \ufffdn\ufffdl eeprom Retrieved pin value: 239 Variable value: 0 Retrieved didNotify: 1 Write pin value: 240 Write didNotify: 0 EEPROM successfully committed rll\ufffd\ufffd | \ufffdl\ufffd | \ufffdl\ufffdb | \ufffd\ufffd\ufffd\ufffdr\ufffdb\ufffdb\ufffd\ufffdnn\ufffdlnn\ufffd\ufffd\ufffdbp\ufffd\ufffdlrlrlp\ufffdn\ufffd\ufffdl\ufffd\ufffdbn\ufffd | \ufffd\ufffd\ufffdb\ufffd\ufffdnn\ufffdl\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrr\ufffd ` p\ufffdn\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdbn\ufffd | \ufffdb\ufffd\ufffdnn\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrl ` r\ufffd\ufffdnrl ` \ufffd\ufffd\ufffdll ` \ufffdn\ufffdl eeprom Retrieved pin value: 240 Variable value: 0 Retrieved didNotify: 0 Write pin value: 240 Write didNotify: 1 EEPROM successfully committed ...","title":"Output"},{"location":"test/eeprom/#analysis","text":"Everything worked as expected. The original variable was reset to 0 after waking up from a deep sleep. The value was able to be successfully stored and retrieved in the EEPROM before and after the deep sleep respectively.","title":"Analysis"},{"location":"test/eeprom/#conclusion","text":"If a sketch uses the deep sleep mode and a previous values is to be used again, it firsts needs to be saved to the EEPROM and then retrieved on the next boot.","title":"Conclusion"},{"location":"test/eeprom/#troubleshooting","text":"WIP","title":"Troubleshooting"},{"location":"test/eeprom/#references","text":"https://github.com/esp8266/Arduino/blob/9f536e68f8f3aa3ffae26493dd0a31e1957d2e81/libraries/EEPROM/examples/eeprom_write/eeprom_write.ino https://github.com/esp8266/Arduino/blob/9f536e68f8f3aa3ffae26493dd0a31e1957d2e81/libraries/EEPROM/examples/eeprom_read/eeprom_read.ino https://arduino.stackexchange.com/a/33363 https://forum.arduino.cc/t/two-newbie-questions-status-and-printing-a-boolean/77672/3","title":"References"},{"location":"test/https/","text":"https \u00b6 Connect to a secure site and print the response. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 Circuit \u00b6 Circuit made with Circuit Diagram . Code \u00b6 WIP Output \u00b6 WIP Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 https://github.com/mathworks/thingspeak-arduino/blob/4110765fca328faf6abebcc8d7ed3a78ad583c2a/examples/ESP8266/program%20board%20directly/ReadFieldSecure/ReadFieldSecure.ino","title":"https"},{"location":"test/https/#https","text":"Connect to a secure site and print the response.","title":"https"},{"location":"test/https/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/https/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/https/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/https/#procedure","text":"","title":"Procedure"},{"location":"test/https/#circuit","text":"Circuit made with Circuit Diagram .","title":"Circuit"},{"location":"test/https/#code","text":"WIP","title":"Code"},{"location":"test/https/#output","text":"WIP","title":"Output"},{"location":"test/https/#analysis","text":"WIP","title":"Analysis"},{"location":"test/https/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/https/#references","text":"https://github.com/mathworks/thingspeak-arduino/blob/4110765fca328faf6abebcc8d7ed3a78ad583c2a/examples/ESP8266/program%20board%20directly/ReadFieldSecure/ReadFieldSecure.ino","title":"References"},{"location":"test/ina260/","text":"ina260 \u00b6 Test the voltage, current, and power readings of the Adafruit INA260 High or Low Side Voltage, Current, Power Sensor. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 All of the Adafruit circuit boards can be strung together to monitor the current, voltage, and power of the battery. The mode is set to recharge when the current is negative and discharge when the current is positive. The A button on the OLED is used to turn the Powerboost on and off. All measurements are taken right in front of the batteries and so all are accurate. First switch is used to turn the Feather on and off. Second switch is used to override the Feather to turn the Powerboost on and off. Assumptions \u00b6 WIP Procedure \u00b6 Circuit \u00b6 Adafruit Feather HUZZAH32 with 3.7V lipo battery, Adafruit 128x64 OLED , Adafruit Powerboost 1000 Basic , Adafruit Adafruit INA260 High or Low Side Voltage, Current, Power Sensor and Adafruit bq24074 solar charger . Circuit made with Circuit Diagram . Code \u00b6 task test:compile-upload NAME = ina260 Output \u00b6 Adafruit INA260 Test Found INA260 chip Mode: recharge Current: 21 mA Voltage: 2 .19 V Power: 50 mW Time left: 367 :34 Mode: recharge Current: 21 mA Voltage: 2 .19 V Power: 50 mW Time left: 367 :34 Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 WIP","title":"ina260"},{"location":"test/ina260/#ina260","text":"Test the voltage, current, and power readings of the Adafruit INA260 High or Low Side Voltage, Current, Power Sensor.","title":"ina260"},{"location":"test/ina260/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/ina260/#hypothesis","text":"All of the Adafruit circuit boards can be strung together to monitor the current, voltage, and power of the battery. The mode is set to recharge when the current is negative and discharge when the current is positive. The A button on the OLED is used to turn the Powerboost on and off. All measurements are taken right in front of the batteries and so all are accurate. First switch is used to turn the Feather on and off. Second switch is used to override the Feather to turn the Powerboost on and off.","title":"Hypothesis"},{"location":"test/ina260/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/ina260/#procedure","text":"","title":"Procedure"},{"location":"test/ina260/#circuit","text":"Adafruit Feather HUZZAH32 with 3.7V lipo battery, Adafruit 128x64 OLED , Adafruit Powerboost 1000 Basic , Adafruit Adafruit INA260 High or Low Side Voltage, Current, Power Sensor and Adafruit bq24074 solar charger . Circuit made with Circuit Diagram .","title":"Circuit"},{"location":"test/ina260/#code","text":"task test:compile-upload NAME = ina260","title":"Code"},{"location":"test/ina260/#output","text":"Adafruit INA260 Test Found INA260 chip Mode: recharge Current: 21 mA Voltage: 2 .19 V Power: 50 mW Time left: 367 :34 Mode: recharge Current: 21 mA Voltage: 2 .19 V Power: 50 mW Time left: 367 :34","title":"Output"},{"location":"test/ina260/#analysis","text":"WIP","title":"Analysis"},{"location":"test/ina260/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/ina260/#references","text":"WIP","title":"References"},{"location":"test/lbo/","text":"lbo \u00b6 Monitor the LBO pin on Adafruit Powerboost using a Feather. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 Circuit \u00b6 Connect pin 14 of the Feather to the LBO pin of the Powerboost with a diode in between. Connect an adjustable power supply to the Bat and GND pins of the Powerboost with a voltage of 3.2 VDC so that the low batter LED turns on. Circuit made with Circuit Diagram . Code \u00b6 task test:compile-upload NAME = lbo Output \u00b6 WIP Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 WIP","title":"lbo"},{"location":"test/lbo/#lbo","text":"Monitor the LBO pin on Adafruit Powerboost using a Feather.","title":"lbo"},{"location":"test/lbo/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/lbo/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/lbo/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/lbo/#procedure","text":"","title":"Procedure"},{"location":"test/lbo/#circuit","text":"Connect pin 14 of the Feather to the LBO pin of the Powerboost with a diode in between. Connect an adjustable power supply to the Bat and GND pins of the Powerboost with a voltage of 3.2 VDC so that the low batter LED turns on. Circuit made with Circuit Diagram .","title":"Circuit"},{"location":"test/lbo/#code","text":"task test:compile-upload NAME = lbo","title":"Code"},{"location":"test/lbo/#output","text":"WIP","title":"Output"},{"location":"test/lbo/#analysis","text":"WIP","title":"Analysis"},{"location":"test/lbo/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/lbo/#references","text":"WIP","title":"References"},{"location":"test/oled/","text":"oled \u00b6 Test the Adafruit 128x64 OLED FeatherWing display. Sketch \u00b6 The sketch can be founder here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 WIP Circuit \u00b6 WIP Circuit made with Circuit Diagram Code \u00b6 Install Adafruit SH110X library arduino-cli lib install \"Adafruit SH110X\" Install Adafruit GFX Library arduino-cli lib install \"Adafruit GFX Library\" Output \u00b6 Serial Output 128x64 OLED FeatherWing test OLED begun Button test The AAAABBBBBBCCCC is printed when the A, B, & C buttons on the OLED screen are pressed. OLED Output Connecting to SSID 'adafruit' :connected! IP: 10 .0.1.23 Sending val #0 AAAABBBBBBCCCC Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 https://learn.adafruit.com/adafruit-128x64-oled-featherwing/arduino-code https://learn.adafruit.com/adafruit-gfx-graphics-library","title":"oled"},{"location":"test/oled/#oled","text":"Test the Adafruit 128x64 OLED FeatherWing display.","title":"oled"},{"location":"test/oled/#sketch","text":"The sketch can be founder here .","title":"Sketch"},{"location":"test/oled/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/oled/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/oled/#procedure","text":"WIP","title":"Procedure"},{"location":"test/oled/#circuit","text":"WIP Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/oled/#code","text":"Install Adafruit SH110X library arduino-cli lib install \"Adafruit SH110X\" Install Adafruit GFX Library arduino-cli lib install \"Adafruit GFX Library\"","title":"Code"},{"location":"test/oled/#output","text":"Serial Output 128x64 OLED FeatherWing test OLED begun Button test The AAAABBBBBBCCCC is printed when the A, B, & C buttons on the OLED screen are pressed. OLED Output Connecting to SSID 'adafruit' :connected! IP: 10 .0.1.23 Sending val #0 AAAABBBBBBCCCC","title":"Output"},{"location":"test/oled/#analysis","text":"WIP","title":"Analysis"},{"location":"test/oled/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/oled/#references","text":"https://learn.adafruit.com/adafruit-128x64-oled-featherwing/arduino-code https://learn.adafruit.com/adafruit-gfx-graphics-library","title":"References"},{"location":"test/panel/","text":"panel \u00b6 Measure the voltage and current of a solar panel made of multiple solar cells. Hypothesis \u00b6 The output of a solar panel is around 7.5V and 500mA made from 15 solar cells with an output of 2.5V and 100mA . The salvaged solar cells are to wired up in series and parallel to create solare panel that would produce more voltage and current needed for the TP4056 . Assumptions \u00b6 WIP Procedure \u00b6 Circuit \u00b6 There are 3 rows of cells that are wired in series and each row is wired in parallel. Each row consists of 5 cells wired in paralle with an output of 2.5V at 500mA which makes the panel a total of 7.5V at 500mA for the entire panel. Connect a 20\u03a9 resistor to the solar panel. Circuit made with Circuit Diagram Output \u00b6 Measure the actual resistance of the resistor. Measure the voltage across the resistor when the cell is in direct sun light. \\[ Resistance=20\u03a9 \\] \\[ Voltage=6.8V \\] Analysis \u00b6 The current through the resistor can be calculated using Ohm's law . \\[ I=\\frac{V}{R} \\] Using our measure values. \\[ I=\\frac{6.8V}{20\u03a9} \\] \\[ \\boxed{I=0.34A} \\] Power \u00b6 The power through the resistor can be calculated using the following formula. \\[ P=IV \\] Using our measure values. \\[ P=0.34A\\times6.8V \\] \\[ \\boxed{P=2.3W} \\] Efficiency \u00b6 According to this site , the average solar radiation intensity is \"1000 W/m2 on a clear day at solar noon in the summer months\" at the Woods Hole Oceanographic Institution lattitude which is, 41.5255063. \\[ solar\\;radiation\\;intensity = 1000\\frac{W}{m^2} \\] I know that there are a lot of factors that go into this value but this can be used as a very rough starting point. Solar cell radiation intensity \\[ solar\\;radiation\\;intensity=\\frac{2.3W}{\\frac{(57mm)^2}{cell}\\times15cells}\\times\\frac{(1000mm)^2}{1m^2} \\] \\[ \\boxed{solar\\;radiation\\;intensity=47\\frac{W}{m^2}} \\] \\[ efficiency=\\frac{47\\frac{W}{m^2}}{1000\\frac{W}{m^2}} \\] \\[ \\boxed{efficiency=4.7\\%} \\] Conclusion \u00b6 The overall efficiency seems really low. Perhaps some reasons are that the epoxy surfaces of the cell are dirty or that the circuit isn't optmized for low voltage. The design may be able to be changed for 2 rows of 10 cells (I have 5 extra cells) rather than 3 rows of 5 cells to increase the overall current but it'll decrease the working voltage. Plotting an I-V curve for the panel may be helpful in comparing the two designs. Troubleshooting \u00b6 WIP References \u00b6 https://learn.adafruit.com/adafruit-bq24074-universal-usb-dc-solar-charger-breakout/design-notes","title":"panel"},{"location":"test/panel/#panel","text":"Measure the voltage and current of a solar panel made of multiple solar cells.","title":"panel"},{"location":"test/panel/#hypothesis","text":"The output of a solar panel is around 7.5V and 500mA made from 15 solar cells with an output of 2.5V and 100mA . The salvaged solar cells are to wired up in series and parallel to create solare panel that would produce more voltage and current needed for the TP4056 .","title":"Hypothesis"},{"location":"test/panel/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/panel/#procedure","text":"","title":"Procedure"},{"location":"test/panel/#circuit","text":"There are 3 rows of cells that are wired in series and each row is wired in parallel. Each row consists of 5 cells wired in paralle with an output of 2.5V at 500mA which makes the panel a total of 7.5V at 500mA for the entire panel. Connect a 20\u03a9 resistor to the solar panel. Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/panel/#output","text":"Measure the actual resistance of the resistor. Measure the voltage across the resistor when the cell is in direct sun light. \\[ Resistance=20\u03a9 \\] \\[ Voltage=6.8V \\]","title":"Output"},{"location":"test/panel/#analysis","text":"The current through the resistor can be calculated using Ohm's law . \\[ I=\\frac{V}{R} \\] Using our measure values. \\[ I=\\frac{6.8V}{20\u03a9} \\] \\[ \\boxed{I=0.34A} \\]","title":"Analysis"},{"location":"test/panel/#power","text":"The power through the resistor can be calculated using the following formula. \\[ P=IV \\] Using our measure values. \\[ P=0.34A\\times6.8V \\] \\[ \\boxed{P=2.3W} \\]","title":"Power"},{"location":"test/panel/#efficiency","text":"According to this site , the average solar radiation intensity is \"1000 W/m2 on a clear day at solar noon in the summer months\" at the Woods Hole Oceanographic Institution lattitude which is, 41.5255063. \\[ solar\\;radiation\\;intensity = 1000\\frac{W}{m^2} \\] I know that there are a lot of factors that go into this value but this can be used as a very rough starting point. Solar cell radiation intensity \\[ solar\\;radiation\\;intensity=\\frac{2.3W}{\\frac{(57mm)^2}{cell}\\times15cells}\\times\\frac{(1000mm)^2}{1m^2} \\] \\[ \\boxed{solar\\;radiation\\;intensity=47\\frac{W}{m^2}} \\] \\[ efficiency=\\frac{47\\frac{W}{m^2}}{1000\\frac{W}{m^2}} \\] \\[ \\boxed{efficiency=4.7\\%} \\]","title":"Efficiency"},{"location":"test/panel/#conclusion","text":"The overall efficiency seems really low. Perhaps some reasons are that the epoxy surfaces of the cell are dirty or that the circuit isn't optmized for low voltage. The design may be able to be changed for 2 rows of 10 cells (I have 5 extra cells) rather than 3 rows of 5 cells to increase the overall current but it'll decrease the working voltage. Plotting an I-V curve for the panel may be helpful in comparing the two designs.","title":"Conclusion"},{"location":"test/panel/#troubleshooting","text":"WIP","title":"Troubleshooting"},{"location":"test/panel/#references","text":"https://learn.adafruit.com/adafruit-bq24074-universal-usb-dc-solar-charger-breakout/design-notes","title":"References"},{"location":"test/pgood/","text":"pgood \u00b6 Reads the state of the PGOOD pin on the bq24074 . Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 The PGOOD pin is pulled to GND when the LiPo battery on the bq24074 is fully charged. The Feather can be used to read the state of that pin to determine if the battery is fully charged. One potential problem is that the pulled high resistor on pin 14 can cause issues to the PGOOD pin. This method theoretically can use the Feather to also read the state of the CHG pin on the bq24074 which indicates when the LiPo battery is charging. Assumptions \u00b6 The pulled high resistor on pin 14 does not cause an issue with the PGOOD pin. Procedure \u00b6 Circuit \u00b6 Connect a LiPo battery to the LiPo Batt JST connector on the bq24074. Connect the JST connector on the Feather to the LIPO and GND pins on bq24074 so that the Feather is powered by bq24074 and that there is a common ground. Add a 10k\u03a9 pull up resistor to pin 14 on the Feather and pin 3.3V . Connect pin 14 on the Feather to the PGOOD pin on the bq24074. Plug in the USB port on the bq24074 to 5V power. Circuit made with Circuit Diagram Code \u00b6 The sketch reads the opposite of pin 14 so when the PGOOD pin is open, pin 14 is pulled high and the value of pin 14 is 0 . When PGOOD is pulled to GND (open drain), pin 14 is also pulled to GND but the output value is read as 1 . Output \u00b6 test title=Typical Output test: pgood Digial Read: Pin: 14 Value: 0 Digial Read: Pin: 14 Value: 1 When the USB power supply is not plugged into the bq24074, the PGOOD green LED is off and the value of pin 14 is 0 . The built in red LED on the Feather is off. When the USB power supply is plugged into the bq24074, the PGOOD green LED turns on if the LiPo battery is full and the value of pin 14 is 1 . The built in red LED on the Feather is blinking. Analysis \u00b6 Everything worked as expected. The value of pin 14 was correct when the green LED was on or off. The built in red LED on the Feather blinked when the green LED was on and off when the green LED was off. Conclusion \u00b6 The Feather can be used to read the state of PGOOD pin and therefore the state of the CHG pin as well. References \u00b6 https://www.arduino.cc/en/Tutorial/BuiltInExamples/Button https://learn.adafruit.com/adafruit-bq24074-universal-usb-dc-solar-charger-breakout/pinouts https://www.adafruit.com/product/4755","title":"pgood"},{"location":"test/pgood/#pgood","text":"Reads the state of the PGOOD pin on the bq24074 .","title":"pgood"},{"location":"test/pgood/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/pgood/#hypothesis","text":"The PGOOD pin is pulled to GND when the LiPo battery on the bq24074 is fully charged. The Feather can be used to read the state of that pin to determine if the battery is fully charged. One potential problem is that the pulled high resistor on pin 14 can cause issues to the PGOOD pin. This method theoretically can use the Feather to also read the state of the CHG pin on the bq24074 which indicates when the LiPo battery is charging.","title":"Hypothesis"},{"location":"test/pgood/#assumptions","text":"The pulled high resistor on pin 14 does not cause an issue with the PGOOD pin.","title":"Assumptions"},{"location":"test/pgood/#procedure","text":"","title":"Procedure"},{"location":"test/pgood/#circuit","text":"Connect a LiPo battery to the LiPo Batt JST connector on the bq24074. Connect the JST connector on the Feather to the LIPO and GND pins on bq24074 so that the Feather is powered by bq24074 and that there is a common ground. Add a 10k\u03a9 pull up resistor to pin 14 on the Feather and pin 3.3V . Connect pin 14 on the Feather to the PGOOD pin on the bq24074. Plug in the USB port on the bq24074 to 5V power. Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/pgood/#code","text":"The sketch reads the opposite of pin 14 so when the PGOOD pin is open, pin 14 is pulled high and the value of pin 14 is 0 . When PGOOD is pulled to GND (open drain), pin 14 is also pulled to GND but the output value is read as 1 .","title":"Code"},{"location":"test/pgood/#output","text":"test title=Typical Output test: pgood Digial Read: Pin: 14 Value: 0 Digial Read: Pin: 14 Value: 1 When the USB power supply is not plugged into the bq24074, the PGOOD green LED is off and the value of pin 14 is 0 . The built in red LED on the Feather is off. When the USB power supply is plugged into the bq24074, the PGOOD green LED turns on if the LiPo battery is full and the value of pin 14 is 1 . The built in red LED on the Feather is blinking.","title":"Output"},{"location":"test/pgood/#analysis","text":"Everything worked as expected. The value of pin 14 was correct when the green LED was on or off. The built in red LED on the Feather blinked when the green LED was on and off when the green LED was off.","title":"Analysis"},{"location":"test/pgood/#conclusion","text":"The Feather can be used to read the state of PGOOD pin and therefore the state of the CHG pin as well.","title":"Conclusion"},{"location":"test/pgood/#references","text":"https://www.arduino.cc/en/Tutorial/BuiltInExamples/Button https://learn.adafruit.com/adafruit-bq24074-universal-usb-dc-solar-charger-breakout/pinouts https://www.adafruit.com/product/4755","title":"References"},{"location":"test/powerboost/","text":"powerboost \u00b6 Turn on and off an Adafruit Powerboost using a Feather. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 The EN pin on the Powerboost when shorted to ground turns off the board. A 10k\u03a9 can connect the EN pind and GND to cause the Powerboost to be off all of the time and the Feather can be used to drive the EN pin high, thus turing on the Powerboost. Assumptions \u00b6 It is fine to keep the resistor between the EN pin and GND all of the time. Procedure \u00b6 Circuit \u00b6 Adafruit Feather Huzzah32 with the Bat pin connected to the Bat pin of the Adafruit Powerboost 1000 Basic and pin 14 of the Feather connected to the EN pin of the Powerboost. All GND s are connected together and the a 10k\u03a9 resistor between the Powerboost EN pin and GND . Circuit made with Circuit Diagram . Code \u00b6 task test:compile-upload NAME = powerboost Output \u00b6 test: powerboost 1 0 1 0 1 0 1 0 Green PWR LED on the Powerboost blinks every second. Analysis \u00b6 Overall, the Feather was able to turn the Powerboost on and off without any issues. Conclusion \u00b6 The Feather can be used turn the Powerboost on and off. A button connected to the Feather may be used to turn the Powerboost on and off. One issue is that the Powerboost can only be turned on if the Feather is also on. Sometimes when the current draw is to high from the Powerboost will cause the Feather to turn off which will cause everything to turn off. Perhaps a manual switch may be placed between the resistor and ground that will completely float the EN pin causing to Powerboost to be turned on manually. References \u00b6 https://forums.adafruit.com/viewtopic.php?f=8&t=163192&p=802434#p802434","title":"powerboost"},{"location":"test/powerboost/#powerboost","text":"Turn on and off an Adafruit Powerboost using a Feather.","title":"powerboost"},{"location":"test/powerboost/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/powerboost/#hypothesis","text":"The EN pin on the Powerboost when shorted to ground turns off the board. A 10k\u03a9 can connect the EN pind and GND to cause the Powerboost to be off all of the time and the Feather can be used to drive the EN pin high, thus turing on the Powerboost.","title":"Hypothesis"},{"location":"test/powerboost/#assumptions","text":"It is fine to keep the resistor between the EN pin and GND all of the time.","title":"Assumptions"},{"location":"test/powerboost/#procedure","text":"","title":"Procedure"},{"location":"test/powerboost/#circuit","text":"Adafruit Feather Huzzah32 with the Bat pin connected to the Bat pin of the Adafruit Powerboost 1000 Basic and pin 14 of the Feather connected to the EN pin of the Powerboost. All GND s are connected together and the a 10k\u03a9 resistor between the Powerboost EN pin and GND . Circuit made with Circuit Diagram .","title":"Circuit"},{"location":"test/powerboost/#code","text":"task test:compile-upload NAME = powerboost","title":"Code"},{"location":"test/powerboost/#output","text":"test: powerboost 1 0 1 0 1 0 1 0 Green PWR LED on the Powerboost blinks every second.","title":"Output"},{"location":"test/powerboost/#analysis","text":"Overall, the Feather was able to turn the Powerboost on and off without any issues.","title":"Analysis"},{"location":"test/powerboost/#conclusion","text":"The Feather can be used turn the Powerboost on and off. A button connected to the Feather may be used to turn the Powerboost on and off. One issue is that the Powerboost can only be turned on if the Feather is also on. Sometimes when the current draw is to high from the Powerboost will cause the Feather to turn off which will cause everything to turn off. Perhaps a manual switch may be placed between the resistor and ground that will completely float the EN pin causing to Powerboost to be turned on manually.","title":"Conclusion"},{"location":"test/powerboost/#references","text":"https://forums.adafruit.com/viewtopic.php?f=8&t=163192&p=802434#p802434","title":"References"},{"location":"test/sleep/","text":"sleep \u00b6 Put the Adafruit Feather Huzzah to a deep sleep. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 The Adafruit Feather Huzzah can be put to a deep sleep and wake up after a specified amount of time. Assumptions \u00b6 WIP Procedure \u00b6 Circuit \u00b6 Connect the RST pin to pin 16 . Circuit made with Circuit Diagram Code \u00b6 From the ./test/sleep directory: # compile arduino-cli compile -b esp8266:esp8266:huzzah . # upload arduino-cli upload -p /dev/ttyUSB0 -b esp8266:esp8266:huzzah . # monitor screen /dev/ttyUSB0 115200 During the first bootup after the upload, the Feather might be stuck with the internal light dim. Press the physical RESET button. Output \u00b6 rll\ufffd\ufffd | \ufffdl\ufffd | \ufffdl\ufffdb | \ufffd\ufffd\ufffd\ufffdr\ufffdb\ufffdb\ufffd\ufffdnn\ufffdlnn\ufffd\ufffd\ufffdbp\ufffd\ufffdlrlrlp\ufffdn\ufffd\ufffdl\ufffd\ufffdbn\ufffd | \ufffd\ufffd\ufffdb\ufffd\ufffdnn\ufffdl\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrr\ufffd ` p\ufffdn\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdbn\ufffd | \ufffdb\ufffd\ufffdnn\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrl ` r\ufffd\ufffdnrl ` \ufffd\ufffdpl ` \ufffdn\ufffdlwaking up going to sleep rll\ufffd\ufffd | \ufffdl\ufffd | \ufffdl\ufffdb | \ufffd\ufffd\ufffd\ufffdr\ufffdb\ufffdb\ufffd\ufffdnn\ufffdlnn\ufffd\ufffd\ufffdbp\ufffd\ufffdlrlrlp\ufffdn\ufffd\ufffdl\ufffd\ufffdbn\ufffd | \ufffd\ufffd\ufffdb\ufffd\ufffdnn\ufffdl\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrr\ufffd ` p\ufffdn\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdbn\ufffd | \ufffdb\ufffd\ufffdnn\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrl ` r\ufffd\ufffdnrl ` \ufffd\ufffdpl ` \ufffdn\ufffdlwaking up going to sleep I don't know why there is garbage that is sent to to the serial monitor during bootup of the Feather. The higher the baud rate, the longer the garbage. Analysis \u00b6 During normal operation, the Feather should turn on the internal LED for the time specified by DELAY_LOOP . The Feather should then sleep for the amount of time specified by SLEEP_TIME and the internal LED should turn off. Conclusion \u00b6 WIP Troubleshooting \u00b6 The internal LED is dim and the console is blank when connected to a computer via USB \u00b6 The Feather needs to be reset. Press the physical RESET button. References \u00b6 https://learnarduinonow.com/2018/07/05/esp8266-deep-sleep-mode.html","title":"sleep"},{"location":"test/sleep/#sleep","text":"Put the Adafruit Feather Huzzah to a deep sleep.","title":"sleep"},{"location":"test/sleep/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/sleep/#hypothesis","text":"The Adafruit Feather Huzzah can be put to a deep sleep and wake up after a specified amount of time.","title":"Hypothesis"},{"location":"test/sleep/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/sleep/#procedure","text":"","title":"Procedure"},{"location":"test/sleep/#circuit","text":"Connect the RST pin to pin 16 . Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/sleep/#code","text":"From the ./test/sleep directory: # compile arduino-cli compile -b esp8266:esp8266:huzzah . # upload arduino-cli upload -p /dev/ttyUSB0 -b esp8266:esp8266:huzzah . # monitor screen /dev/ttyUSB0 115200 During the first bootup after the upload, the Feather might be stuck with the internal light dim. Press the physical RESET button.","title":"Code"},{"location":"test/sleep/#output","text":"rll\ufffd\ufffd | \ufffdl\ufffd | \ufffdl\ufffdb | \ufffd\ufffd\ufffd\ufffdr\ufffdb\ufffdb\ufffd\ufffdnn\ufffdlnn\ufffd\ufffd\ufffdbp\ufffd\ufffdlrlrlp\ufffdn\ufffd\ufffdl\ufffd\ufffdbn\ufffd | \ufffd\ufffd\ufffdb\ufffd\ufffdnn\ufffdl\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrr\ufffd ` p\ufffdn\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdbn\ufffd | \ufffdb\ufffd\ufffdnn\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrl ` r\ufffd\ufffdnrl ` \ufffd\ufffdpl ` \ufffdn\ufffdlwaking up going to sleep rll\ufffd\ufffd | \ufffdl\ufffd | \ufffdl\ufffdb | \ufffd\ufffd\ufffd\ufffdr\ufffdb\ufffdb\ufffd\ufffdnn\ufffdlnn\ufffd\ufffd\ufffdbp\ufffd\ufffdlrlrlp\ufffdn\ufffd\ufffdl\ufffd\ufffdbn\ufffd | \ufffd\ufffd\ufffdb\ufffd\ufffdnn\ufffdl\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrr\ufffd ` p\ufffdn\ufffdr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdbn\ufffd | \ufffdb\ufffd\ufffdnn\ufffd\ufffdl ` \ufffdnn\ufffdlnr\ufffd\ufffd\ufffdnrl ` r\ufffd\ufffdnrl ` \ufffd\ufffdpl ` \ufffdn\ufffdlwaking up going to sleep I don't know why there is garbage that is sent to to the serial monitor during bootup of the Feather. The higher the baud rate, the longer the garbage.","title":"Output"},{"location":"test/sleep/#analysis","text":"During normal operation, the Feather should turn on the internal LED for the time specified by DELAY_LOOP . The Feather should then sleep for the amount of time specified by SLEEP_TIME and the internal LED should turn off.","title":"Analysis"},{"location":"test/sleep/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/sleep/#troubleshooting","text":"","title":"Troubleshooting"},{"location":"test/sleep/#the-internal-led-is-dim-and-the-console-is-blank-when-connected-to-a-computer-via-usb","text":"The Feather needs to be reset. Press the physical RESET button.","title":"The internal LED is dim and the console is blank when connected to a computer via USB"},{"location":"test/sleep/#references","text":"https://learnarduinonow.com/2018/07/05/esp8266-deep-sleep-mode.html","title":"References"},{"location":"test/sunset/","text":"sunset \u00b6 Get the sunrise and sunset times from a website. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 WIP Circuit \u00b6 Circuit made with Circuit Diagram Code \u00b6 Install library arduino-cli lib install ArduinoJson Update GPS coordinates. const char * lat = \"33.60\" ; const char * lng = \"-117.68\" ; Output \u00b6 All dates are returned as UTC. test: sunset Connecting to SSID: MySSID .....connected IP Address: 192 .168.1.77 Hostname: Feather host: http://api.sunrise-sunset.org/json? & date = today & formatted = 0 & lat = 33 .60 & lng = -117.68 HTTP Response code: 200 Sunrise: 2022 -02-04T14:43:05+00:00 Sunset: 2022 -02-05T01:26:11+00:00 host: http://api.sunrise-sunset.org/json? & date = today & formatted = 0 & lat = 33 .60 & lng = -117.68 HTTP Response code: 200 Sunrise: 2022 -02-04T14:43:05+00:00 Sunset: 2022 -02-05T01:26:11+00:00 ... Analysis \u00b6 WIP Conclusion \u00b6 WIP Troubleshooting \u00b6 WIP References \u00b6 https://randomnerdtutorials.com/esp8266-nodemcu-http-get-post-arduino/#http-get-2 https://sunrise-sunset.org/api https://arduinojson.org/v6/example/parser/","title":"sunset"},{"location":"test/sunset/#sunset","text":"Get the sunrise and sunset times from a website.","title":"sunset"},{"location":"test/sunset/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/sunset/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/sunset/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/sunset/#procedure","text":"WIP","title":"Procedure"},{"location":"test/sunset/#circuit","text":"Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/sunset/#code","text":"Install library arduino-cli lib install ArduinoJson Update GPS coordinates. const char * lat = \"33.60\" ; const char * lng = \"-117.68\" ;","title":"Code"},{"location":"test/sunset/#output","text":"All dates are returned as UTC. test: sunset Connecting to SSID: MySSID .....connected IP Address: 192 .168.1.77 Hostname: Feather host: http://api.sunrise-sunset.org/json? & date = today & formatted = 0 & lat = 33 .60 & lng = -117.68 HTTP Response code: 200 Sunrise: 2022 -02-04T14:43:05+00:00 Sunset: 2022 -02-05T01:26:11+00:00 host: http://api.sunrise-sunset.org/json? & date = today & formatted = 0 & lat = 33 .60 & lng = -117.68 HTTP Response code: 200 Sunrise: 2022 -02-04T14:43:05+00:00 Sunset: 2022 -02-05T01:26:11+00:00 ...","title":"Output"},{"location":"test/sunset/#analysis","text":"WIP","title":"Analysis"},{"location":"test/sunset/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/sunset/#troubleshooting","text":"WIP","title":"Troubleshooting"},{"location":"test/sunset/#references","text":"https://randomnerdtutorials.com/esp8266-nodemcu-http-get-post-arduino/#http-get-2 https://sunrise-sunset.org/api https://arduinojson.org/v6/example/parser/","title":"References"},{"location":"test/thingspeak/","text":"thingspeak \u00b6 Reads value on analog input A0 and calculates the the percent level of a lipo battery and uploads the value to ThingSpeak. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 The Adafruit Feather Huzzah can be used to upload data to ThingSpeak. Assumptions \u00b6 WIP Procedure \u00b6 Circuit \u00b6 Code \u00b6 Create a channel on ThingSpeak . Enter ThingSpeak and WiFi credentials in secrets.h . Change the ThingSpeak update interval by changing the DELAY_LOOP variable in the sketch. Note: The update interval should not be less than 15 seconds (15000) for free accounts. See the ThingSpeak FAQ for details. Install the ThingSpeak library arduino-cli lib install ThingSpeak Compile and upload the code. Output \u00b6 Battery level: 80 % Attempting to connect to SSID: MySSID ....... Connected. Channel update successful. Battery level: 80 % Channel update successful. Battery level: 80 % Channel update successful. ... The Feather should read the battery level, connect to WiFi, and upload the battery level to ThingSpeak. Analysis \u00b6 WIP Conclusion \u00b6 WIP Troubleshooting \u00b6 WIP References \u00b6 https://learn.adafruit.com/using-ifttt-with-adafruit-io/wiring#battery-tracking https://github.com/mathworks/thingspeak-arduino/blob/4110765fca328faf6abebcc8d7ed3a78ad583c2a/examples/ESP8266/program%20board%20directly/WriteSingleField/WriteSingleField.ino","title":"thingspeak"},{"location":"test/thingspeak/#thingspeak","text":"Reads value on analog input A0 and calculates the the percent level of a lipo battery and uploads the value to ThingSpeak.","title":"thingspeak"},{"location":"test/thingspeak/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/thingspeak/#hypothesis","text":"The Adafruit Feather Huzzah can be used to upload data to ThingSpeak.","title":"Hypothesis"},{"location":"test/thingspeak/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/thingspeak/#procedure","text":"","title":"Procedure"},{"location":"test/thingspeak/#circuit","text":"","title":"Circuit"},{"location":"test/thingspeak/#code","text":"Create a channel on ThingSpeak . Enter ThingSpeak and WiFi credentials in secrets.h . Change the ThingSpeak update interval by changing the DELAY_LOOP variable in the sketch. Note: The update interval should not be less than 15 seconds (15000) for free accounts. See the ThingSpeak FAQ for details. Install the ThingSpeak library arduino-cli lib install ThingSpeak Compile and upload the code.","title":"Code"},{"location":"test/thingspeak/#output","text":"Battery level: 80 % Attempting to connect to SSID: MySSID ....... Connected. Channel update successful. Battery level: 80 % Channel update successful. Battery level: 80 % Channel update successful. ... The Feather should read the battery level, connect to WiFi, and upload the battery level to ThingSpeak.","title":"Output"},{"location":"test/thingspeak/#analysis","text":"WIP","title":"Analysis"},{"location":"test/thingspeak/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/thingspeak/#troubleshooting","text":"WIP","title":"Troubleshooting"},{"location":"test/thingspeak/#references","text":"https://learn.adafruit.com/using-ifttt-with-adafruit-io/wiring#battery-tracking https://github.com/mathworks/thingspeak-arduino/blob/4110765fca328faf6abebcc8d7ed3a78ad583c2a/examples/ESP8266/program%20board%20directly/WriteSingleField/WriteSingleField.ino","title":"References"},{"location":"test/v2/","text":"v2 \u00b6 Charge the li-ion batteries using a solar panel and then charge USB devices using the li-ion batteries. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 The TP4056 can be used to charge a 3.7V li-ion battery and then the battery can be used to charge other devices using the USB boost converter. Assumptions \u00b6 One 3.7V li-ion is being used to capture the soloar energy. The DPDT switch disallows the li-ion battery from charging and the USB boost converter being used at the same time. Procedure \u00b6 Circuit \u00b6 Connect the solar panel to the IN+ and IN- of the TP4056 . Connect one NC throw of the switch between the solar panel and IN+ of the TP4056 . Connect the other NO throw of the switch between the IN+ of the boost converter and OUT+ of the TP4056 . Connect the 3V li-ion batter to the B+ and B- of the TP4056 . Connect the JST-PH 2.0 connector between the solar panel and the TP4056 . Circuit made with Circuit Diagram Output \u00b6 The red LED on the TP4056 is on when the li-ion battery is charging via the solar panel. The blue LED on the TP4056 is off when the li-ion battery is charging via the solar panel. The red LED on the TP4056 is on off the li-ion battery is fully charged and the solar panel is on. The blue LED on the TP4056 is on when the li-ion battery is fully charged and the solar panel is on. The red LED on the boost converter is off when the solar panel is on. The red LED on the boost converter is on when the solar panel is off. Analysis \u00b6 WIP Conclusion \u00b6 WIP Troubleshooting \u00b6 WIP References \u00b6 WIP","title":"v2"},{"location":"test/v2/#v2","text":"Charge the li-ion batteries using a solar panel and then charge USB devices using the li-ion batteries.","title":"v2"},{"location":"test/v2/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/v2/#hypothesis","text":"The TP4056 can be used to charge a 3.7V li-ion battery and then the battery can be used to charge other devices using the USB boost converter.","title":"Hypothesis"},{"location":"test/v2/#assumptions","text":"One 3.7V li-ion is being used to capture the soloar energy. The DPDT switch disallows the li-ion battery from charging and the USB boost converter being used at the same time.","title":"Assumptions"},{"location":"test/v2/#procedure","text":"","title":"Procedure"},{"location":"test/v2/#circuit","text":"Connect the solar panel to the IN+ and IN- of the TP4056 . Connect one NC throw of the switch between the solar panel and IN+ of the TP4056 . Connect the other NO throw of the switch between the IN+ of the boost converter and OUT+ of the TP4056 . Connect the 3V li-ion batter to the B+ and B- of the TP4056 . Connect the JST-PH 2.0 connector between the solar panel and the TP4056 . Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/v2/#output","text":"The red LED on the TP4056 is on when the li-ion battery is charging via the solar panel. The blue LED on the TP4056 is off when the li-ion battery is charging via the solar panel. The red LED on the TP4056 is on off the li-ion battery is fully charged and the solar panel is on. The blue LED on the TP4056 is on when the li-ion battery is fully charged and the solar panel is on. The red LED on the boost converter is off when the solar panel is on. The red LED on the boost converter is on when the solar panel is off.","title":"Output"},{"location":"test/v2/#analysis","text":"WIP","title":"Analysis"},{"location":"test/v2/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/v2/#troubleshooting","text":"WIP","title":"Troubleshooting"},{"location":"test/v2/#references","text":"WIP","title":"References"},{"location":"test/v3/","text":"v3 \u00b6 Monitor the charging battery level. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 The Adafruit Feather Huzzah can be used to monitor the level of the charging li-ion battery as it is being charged by the solar panel. Assumptions \u00b6 The 3.7V li-ion is being used to capture the soloar energy and power the Feather. The grounds of the TP4056 and Feather will not interfere with each other. The VOLTAGE_MAX variable is the actual maximum voltage that cuts off the charging of the TP4056 . Procedure \u00b6 The li-ion battery is charged using a USB C wall plug until the battery is charged completely. The USB C wall plug is then unplugged and the li-ion batteries are then plugged into a Chromebook to charge the Chromebook battery first with the Chromebook in sleep mode and then with the Chromebook being used while charging. Circuit \u00b6 v3 is based off of v2 except for the following. It is being powered by a USB wall adapter instead of the solar panel. The Feather is being powered by the li-ion battery as well and reporting the battery levels. Add a voltage divider with R1=1M\u03a9 and R2=220k\u03a9 and connect it to the positive side of the charging li-ion battery and the connection point of the resistors to ADC on the Feather. Connect the outer side of R2 to the common ground. Connect the RST pin to pin 16 . Circuit made with Circuit Diagram Code \u00b6 Change the variables in the secrets.h file and the variables at the top of the v3.ino sketch. Compile and upload the sketch as normal. Output \u00b6 Typical Output Battery level: 82 % Attempting to connect to SSID: MySSID ... Connected. Channel update successful. Battery level: 82 % Channel update successful. Battery level: 82 % Channel update successful. Analysis \u00b6 The values go above 100% which means that the maximum voltage of the charging battery is set too low in the sketch. This might be because the Feather is also using some power while charging. The TP4056 blue light never turned on which means the voltage never got high enough. This contradicts the maximum voltage of being over 100% so something is not right. The values spike up and down quite a bit at the end of the graph (~19:00). This is due to the Chromebook being used at the same time as the charging. The Chromebook gave a low power charger connected notification and automatically turned on and off the charging. The data is not very smooth. Perhaps averaging the read values a bit more would smooth out the data. Conclusion \u00b6 The large fluctuations at the end of the data (~19:00) is caused by the Chromebook fluctuating its charging load automatically. The cut off voltage was never reached to turn on the TP4056 blue LED because the Feather was also using power from the charger. The data should be smoothed out a bit more using some other method. References \u00b6 WIP","title":"v3"},{"location":"test/v3/#v3","text":"Monitor the charging battery level.","title":"v3"},{"location":"test/v3/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/v3/#hypothesis","text":"The Adafruit Feather Huzzah can be used to monitor the level of the charging li-ion battery as it is being charged by the solar panel.","title":"Hypothesis"},{"location":"test/v3/#assumptions","text":"The 3.7V li-ion is being used to capture the soloar energy and power the Feather. The grounds of the TP4056 and Feather will not interfere with each other. The VOLTAGE_MAX variable is the actual maximum voltage that cuts off the charging of the TP4056 .","title":"Assumptions"},{"location":"test/v3/#procedure","text":"The li-ion battery is charged using a USB C wall plug until the battery is charged completely. The USB C wall plug is then unplugged and the li-ion batteries are then plugged into a Chromebook to charge the Chromebook battery first with the Chromebook in sleep mode and then with the Chromebook being used while charging.","title":"Procedure"},{"location":"test/v3/#circuit","text":"v3 is based off of v2 except for the following. It is being powered by a USB wall adapter instead of the solar panel. The Feather is being powered by the li-ion battery as well and reporting the battery levels. Add a voltage divider with R1=1M\u03a9 and R2=220k\u03a9 and connect it to the positive side of the charging li-ion battery and the connection point of the resistors to ADC on the Feather. Connect the outer side of R2 to the common ground. Connect the RST pin to pin 16 . Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/v3/#code","text":"Change the variables in the secrets.h file and the variables at the top of the v3.ino sketch. Compile and upload the sketch as normal.","title":"Code"},{"location":"test/v3/#output","text":"Typical Output Battery level: 82 % Attempting to connect to SSID: MySSID ... Connected. Channel update successful. Battery level: 82 % Channel update successful. Battery level: 82 % Channel update successful.","title":"Output"},{"location":"test/v3/#analysis","text":"The values go above 100% which means that the maximum voltage of the charging battery is set too low in the sketch. This might be because the Feather is also using some power while charging. The TP4056 blue light never turned on which means the voltage never got high enough. This contradicts the maximum voltage of being over 100% so something is not right. The values spike up and down quite a bit at the end of the graph (~19:00). This is due to the Chromebook being used at the same time as the charging. The Chromebook gave a low power charger connected notification and automatically turned on and off the charging. The data is not very smooth. Perhaps averaging the read values a bit more would smooth out the data.","title":"Analysis"},{"location":"test/v3/#conclusion","text":"The large fluctuations at the end of the data (~19:00) is caused by the Chromebook fluctuating its charging load automatically. The cut off voltage was never reached to turn on the TP4056 blue LED because the Feather was also using power from the charger. The data should be smoothed out a bit more using some other method.","title":"Conclusion"},{"location":"test/v3/#references","text":"WIP","title":"References"},{"location":"test/v4/","text":"v4 \u00b6 Reads value on analog input A0 and calculates the the percent level of a lipo battery and upload the value to ThingSpeak. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 WIP Circuit \u00b6 Circuit made with Circuit Diagram Code \u00b6 WIP Output \u00b6 Typical Output Connecting to SSID: MySSID ...connected IP Address: 192 .168.1.77 Hostname: Feather Battery level: 745 Battery percentage: 90 % Battery voltage: 4 .04V Channel number: 1642208 Channel update successful Going to sleep for 15 minutes Analysis \u00b6 WIP Conclusion \u00b6 WIP Troubleshooting \u00b6 WIP References \u00b6 WIP","title":"v4"},{"location":"test/v4/#v4","text":"Reads value on analog input A0 and calculates the the percent level of a lipo battery and upload the value to ThingSpeak.","title":"v4"},{"location":"test/v4/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/v4/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/v4/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/v4/#procedure","text":"WIP","title":"Procedure"},{"location":"test/v4/#circuit","text":"Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/v4/#code","text":"WIP","title":"Code"},{"location":"test/v4/#output","text":"Typical Output Connecting to SSID: MySSID ...connected IP Address: 192 .168.1.77 Hostname: Feather Battery level: 745 Battery percentage: 90 % Battery voltage: 4 .04V Channel number: 1642208 Channel update successful Going to sleep for 15 minutes","title":"Output"},{"location":"test/v4/#analysis","text":"WIP","title":"Analysis"},{"location":"test/v4/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/v4/#troubleshooting","text":"WIP","title":"Troubleshooting"},{"location":"test/v4/#references","text":"WIP","title":"References"},{"location":"test/wake/","text":"wake \u00b6 This code displays how to use deep sleep with a touch as a wake up source and how to store data in RTC memory to use it over reboots. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 The ESP32 can determine which method was used to wake it. The ESP32 can determine which button was pressed to wake it. Assumptions \u00b6 WIP Procedure \u00b6 Circuit \u00b6 Circuit made with Circuit Diagram . Code \u00b6 task test:compile-upload NAME = wake Output \u00b6 ets Jun 8 2016 00 :22:57 rst:0x5 ( DEEPSLEEP_RESET ) ,boot:0x13 ( SPI_FAST_FLASH_BOOT ) configsip: 0 , SPIWP:0xee clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:x0xx,hd ) drv:0x00,wp_drv:0x00 mode:DIO, clock div:1 load:0x3fff0018,len:4 load:0x3fff001c,len:812 load:0x40078000,len:0 load:0x40078000,len:11392 entry 0x40078a9c Boot number: 4 Wakeup caused by touchpad Touch detected on GPIO 15 Going to sleep now Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 https://github.com/RuiSantosdotme/ESP32-Course/blob/fdc20f81abea74e976b9a3334a18deebac496d6b/code/DeepSleep/TouchWakeUp/TouchWakeUp.ino https://randomnerdtutorials.com/esp32-touch-wake-up-deep-sleep/","title":"wake"},{"location":"test/wake/#wake","text":"This code displays how to use deep sleep with a touch as a wake up source and how to store data in RTC memory to use it over reboots.","title":"wake"},{"location":"test/wake/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/wake/#hypothesis","text":"The ESP32 can determine which method was used to wake it. The ESP32 can determine which button was pressed to wake it.","title":"Hypothesis"},{"location":"test/wake/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/wake/#procedure","text":"","title":"Procedure"},{"location":"test/wake/#circuit","text":"Circuit made with Circuit Diagram .","title":"Circuit"},{"location":"test/wake/#code","text":"task test:compile-upload NAME = wake","title":"Code"},{"location":"test/wake/#output","text":"ets Jun 8 2016 00 :22:57 rst:0x5 ( DEEPSLEEP_RESET ) ,boot:0x13 ( SPI_FAST_FLASH_BOOT ) configsip: 0 , SPIWP:0xee clk_drv:0x00,q_drv:0x00,d_drv:0x00,cs0_drv:x0xx,hd ) drv:0x00,wp_drv:0x00 mode:DIO, clock div:1 load:0x3fff0018,len:4 load:0x3fff001c,len:812 load:0x40078000,len:0 load:0x40078000,len:11392 entry 0x40078a9c Boot number: 4 Wakeup caused by touchpad Touch detected on GPIO 15 Going to sleep now","title":"Output"},{"location":"test/wake/#analysis","text":"WIP","title":"Analysis"},{"location":"test/wake/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/wake/#references","text":"https://github.com/RuiSantosdotme/ESP32-Course/blob/fdc20f81abea74e976b9a3334a18deebac496d6b/code/DeepSleep/TouchWakeUp/TouchWakeUp.ino https://randomnerdtutorials.com/esp32-touch-wake-up-deep-sleep/","title":"References"},{"location":"test/wifi/","text":"wifi \u00b6 A quick wifi test that pings a website. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 WIP Circuit \u00b6 Circuit made with Circuit Diagram Code \u00b6 WIP Output \u00b6 Typical Output Connecting to MySSID ....... WiFi connected IP address: 192 .168.1.77 connecting to wifitest.adafruit.com Requesting URL: /testwifi/index.html HTTP/1.1 200 OK Server: nginx/1.18.0 ( Ubuntu ) Date: Mon, 07 Feb 2022 04 :21:00 GMT Content-Type: text/html Content-Length: 69 Last-Modified: Thu, 09 Dec 2021 17 :26:22 GMT Connection: close ETag: \"61b23c3e-45\" Accept-Ranges: bytes This is a test of Adafruit WiFi! If you can read this, its working : ) closing connection Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 WIP","title":"wifi"},{"location":"test/wifi/#wifi","text":"A quick wifi test that pings a website.","title":"wifi"},{"location":"test/wifi/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/wifi/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/wifi/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/wifi/#procedure","text":"WIP","title":"Procedure"},{"location":"test/wifi/#circuit","text":"Circuit made with Circuit Diagram","title":"Circuit"},{"location":"test/wifi/#code","text":"WIP","title":"Code"},{"location":"test/wifi/#output","text":"Typical Output Connecting to MySSID ....... WiFi connected IP address: 192 .168.1.77 connecting to wifitest.adafruit.com Requesting URL: /testwifi/index.html HTTP/1.1 200 OK Server: nginx/1.18.0 ( Ubuntu ) Date: Mon, 07 Feb 2022 04 :21:00 GMT Content-Type: text/html Content-Length: 69 Last-Modified: Thu, 09 Dec 2021 17 :26:22 GMT Connection: close ETag: \"61b23c3e-45\" Accept-Ranges: bytes This is a test of Adafruit WiFi! If you can read this, its working : ) closing connection","title":"Output"},{"location":"test/wifi/#analysis","text":"WIP","title":"Analysis"},{"location":"test/wifi/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/wifi/#references","text":"WIP","title":"References"},{"location":"test/wifimanager/","text":"wifimanager \u00b6 A basic test of using the WiFiManager to enter credentials. Sketch \u00b6 The sketch can be found here . Hypothesis \u00b6 WIP Assumptions \u00b6 WIP Procedure \u00b6 Install the WiFiManager library Compile and run the test. Connect to to the Feather via WiFi. The SSID is auto generated by the type of Feather. My test was ESP32_F0CE877C . Enter 192.168.4.1 in the browser. Enter in the WiFii crednetials of the AP the Feather should connect to. Circuit \u00b6 Using the Adafruit Feather HUZZAH32. Circuit made with Circuit Diagram . Code \u00b6 Install WiFiManager library arduino-cli lib install WiFiManager Output \u00b6 *wm: [ 1 ] AutoConnect *wm: [ 2 ] ESP32 event handler enabled *wm: [ 2 ] Connecting as wifi client... *wm: [ 2 ] setSTAConfig static ip not set, skipping *wm: [ 1 ] Connecting to SAVED AP: MySSID *wm: [ 1 ] connectTimeout not set, ESP waitForConnectResult... *wm: [ 2 ] Connection result: WL_CONNECTED *wm: [ 1 ] AutoConnect: SUCCESS *wm: [ 2 ] Connected in 2719 ms *wm: [ 1 ] STA IP Address: 192 .168.186.85 connected...yeey : ) Analysis \u00b6 WIP Conclusion \u00b6 WIP References \u00b6 https://github.com/tzapu/WiFiManager/blob/e6d21b84364524f474f05b1fddf97541bd174e7a/examples/Basic/Basic.ino [3]:","title":"wifimanager"},{"location":"test/wifimanager/#wifimanager","text":"A basic test of using the WiFiManager to enter credentials.","title":"wifimanager"},{"location":"test/wifimanager/#sketch","text":"The sketch can be found here .","title":"Sketch"},{"location":"test/wifimanager/#hypothesis","text":"WIP","title":"Hypothesis"},{"location":"test/wifimanager/#assumptions","text":"WIP","title":"Assumptions"},{"location":"test/wifimanager/#procedure","text":"Install the WiFiManager library Compile and run the test. Connect to to the Feather via WiFi. The SSID is auto generated by the type of Feather. My test was ESP32_F0CE877C . Enter 192.168.4.1 in the browser. Enter in the WiFii crednetials of the AP the Feather should connect to.","title":"Procedure"},{"location":"test/wifimanager/#circuit","text":"Using the Adafruit Feather HUZZAH32. Circuit made with Circuit Diagram .","title":"Circuit"},{"location":"test/wifimanager/#code","text":"Install WiFiManager library arduino-cli lib install WiFiManager","title":"Code"},{"location":"test/wifimanager/#output","text":"*wm: [ 1 ] AutoConnect *wm: [ 2 ] ESP32 event handler enabled *wm: [ 2 ] Connecting as wifi client... *wm: [ 2 ] setSTAConfig static ip not set, skipping *wm: [ 1 ] Connecting to SAVED AP: MySSID *wm: [ 1 ] connectTimeout not set, ESP waitForConnectResult... *wm: [ 2 ] Connection result: WL_CONNECTED *wm: [ 1 ] AutoConnect: SUCCESS *wm: [ 2 ] Connected in 2719 ms *wm: [ 1 ] STA IP Address: 192 .168.186.85 connected...yeey : )","title":"Output"},{"location":"test/wifimanager/#analysis","text":"WIP","title":"Analysis"},{"location":"test/wifimanager/#conclusion","text":"WIP","title":"Conclusion"},{"location":"test/wifimanager/#references","text":"https://github.com/tzapu/WiFiManager/blob/e6d21b84364524f474f05b1fddf97541bd174e7a/examples/Basic/Basic.ino [3]:","title":"References"}]}